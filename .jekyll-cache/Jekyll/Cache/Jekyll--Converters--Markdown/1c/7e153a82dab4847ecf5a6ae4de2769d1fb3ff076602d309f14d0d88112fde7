I"<p>updated: 2020-02-19
최근 ECS를 사용해서 컨테이너 기반으로 스테이징 서버를 구축했다. Circle CI를 써보고 싶었는데, 이미 사내에 젠킨스가 구축되어 있어서 젠킨스를 쓰기로 했다.</p>

<p><img src="/images/posts/deploy-process.png" alt="deploy process" /><br />
먼저 빗버킷 <code class="highlighter-rouge">dev</code>, <code class="highlighter-rouge">staging</code> 브랜치에 푸시가 되면 젠킨스가 변화를 감지하고 스크립트 실행한다. 젠킨스 스크립트는 브랜치별로 다른 configuration 파일을 s3 버킷에서 다운받는다. 해당 파일을 소스코드에 추가하고 도커 이미지를 생성하, 생성된 도커 이미지는 <code class="highlighter-rouge">AWS ECR</code>에 푸시한다. 새 이미지를 가지고 <code class="highlighter-rouge">AWS ECS</code> 파게이트에 배포한다.</p>

<p>먼저 도커파일을 작성해서 로컬에서 띄어보았다. 해당 프로젝트는 빗버킷 프라이빗 리포지토리를 <code class="highlighter-rouge">pip install</code> 로 설치해 라이브러리로 사용하는데, 이때 ssh key 가 필요하다. 그래서 로컬의 ssh key를 카피해서 도커 실행시 argument로 전달하는 방법으로 해결했다.</p>

<p><code class="highlighter-rouge">python 2.7 alpine</code> 버전을 사용하는 도커 파일을 작성한다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># arguments</span>
<span class="k">ARG</span><span class="s"> SSH_PRIVATE_KEY</span>

<span class="k">FROM</span><span class="s"> python:2.7-alpine</span>

<span class="c"># set envs</span>
<span class="k">ENV</span><span class="s"> DJANGO_SETTINGS_MODULE=staging</span>
<span class="k">ENV</span><span class="s"> PYTHONIOENCODING=utf-8</span>

<span class="k">RUN </span>apk add <span class="nt">--no-cache</span><span class="se">\
</span>	python2-dev<span class="se">\
</span>	build-base<span class="se">\ </span> <span class="c"># for gcc</span>
	mariadb-dev\  # for mysqlclient
	openssh-client\ # for ssh-keyscan
	zlib-dev\  # for pillow
	jpeg-dev\  # for pillow
	libressl-dev\  # for scipy, numpy
	libffi-dev\  # for scipy, numpy
	lapack-dev\  # for scipy, numpy
	gfortran\  # for scipy, numpy
	musl-dev\  # for scipy, numpy
	git\
	nginx\
	vim\
    &amp;&amp; rm -rf /var/cache/apk/* \ #remove cache
    &amp;&amp; pip install cpython  <span class="c"># for scipy, numpy</span>

<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /root/.ssh <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">chmod </span>0700 /root/.ssh <span class="o">&amp;&amp;</span> <span class="se">\
</span>    ssh-keyscan bitbucket.org <span class="o">&gt;</span> /root/.ssh/known_hosts

<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"</span><span class="nv">$SSH_PRIVATE_KEY</span><span class="s2">"</span> <span class="o">&gt;</span> /root/.ssh/id_rsa <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">chmod </span>400 /root/.ssh/id_rsa

<span class="c"># create working directory</span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /app

<span class="k">ADD</span><span class="s"> app /app</span>

<span class="c"># set working directory</span>
<span class="k">WORKDIR</span><span class="s"> /app</span>

<span class="c"># install dependencies</span>
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt

<span class="c"># run django project</span>
<span class="k">CMD</span><span class="s"> ["python", "manage.py", "runserver", "0.0.0.0:80"]</span>

<span class="c"># open port 80, 5672 for rabbitmq</span>
<span class="k">EXPOSE</span><span class="s"> 80 5672</span>

</code></pre></div></div>

<p>도커 이미지를 <code class="highlighter-rouge">test</code> 라는 이름으로 빌드한다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">-t</span> <span class="nb">test</span> <span class="nt">--build-arg</span> <span class="nv">SSH_PRIVATE_KEY</span><span class="o">=</span><span class="s2">"</span><span class="si">$(</span><span class="nb">cat</span> ~/.ssh/id_rsa<span class="si">)</span><span class="s2">"</span> <span class="nb">.</span>
</code></pre></div></div>

<p>도커 이미지로 컨테이너를 띄운다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nb">test</span>:latest
</code></pre></div></div>

<p>도커 컨테이너가 떴는지 확인한다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps
</code></pre></div></div>

<p>만약 컨테이너가 떴다면 터미널 화면 또는 인터넷 브라우저에서 <code class="highlighter-rouge">0.0.0.0:8000</code> 주소로 확인할 수 있다. 만약 문제가 있어서 컨테이너가 안떴다면 다음 명령어로 정지한 컨테이너를 확인할 수 있다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker ps <span class="nt">-a</span>
</code></pre></div></div>

<p>도커 컨테이너를 확인하고 컨테이너를 삭제한다. 이 방법은 젠킨스에서 자동배포할때 사용할 수 없다. 그리고 해당 프로젝트가 설치하는 패키지가 많아서 이미지를 빌드하는데 기본적으로 1분이 넘었다. 여러가지 방법이 있을 수 있겠지만 나는 이전에 빌드된 이미지를 베이스 이미지로 사용하는 방법을 선택했다. 해당 프로젝트는 사용하는 라이브러리가 크게 바뀌지 않을 예정이여서 가능했다. 먼저 빌드한 이미지를 <code class="highlighter-rouge">base image</code> 라는 이름으로 <code class="highlighter-rouge">AWS ECR</code>에 푸시하고, 이미지를 빌드 할 때 마다 <code class="highlighter-rouge">base image</code> 를 갖고와서 그 이미지를 기반으로 빌드하는 방법이다.</p>

<p>이 방법은 다음과 같은 스텝을 거쳤다.</p>
<ol>
  <li>베이스 이미지로 사용할 이미지를 로컬에서 빌드한다.</li>
  <li><code class="highlighter-rouge">AWS ECR</code>에 푸시한다.</li>
  <li>젠킨스에 <code class="highlighter-rouge">Build with parameters</code> 설정에서 Base image의 태그를 추가한다.</li>
  <li>테스트 한다.</li>
</ol>

<p><code class="highlighter-rouge">AWS ECR</code> 콘솔로 들어가서 <code class="highlighter-rouge">create repository</code> 를 선택한다.
<img src="/images/posts/ecr-console.png" alt="aws ecr console" /></p>

<p>repository 이름만 정하면 바로 생성할 수 있다. 생성된 repository 를 목록에서 클릭하면 <code class="highlighter-rouge">view push commands</code> 에서 이미지를 푸시, 풀하는 데 사용하는 커맨드를 볼 수 있다.
이미지를 푸시하는 커맨드를 사용해 로컬에 있는 베이스 이미지를 푸시한 뒤, 도커 파일의 윗부분을 수정한다.</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># arguments</span>
<span class="k">ARG</span><span class="s"> SSH_PRIVATE_KEY</span>
<span class="k">ARG</span><span class="s"> BASE_IMAGE</span>

<span class="k">FROM</span><span class="s"> $BASE_IMAGE</span>
</code></pre></div></div>

<p>이제부터 도커 이미지를 빌드할때는 argument로 준 이미지를 기반으로 빌드하게 된다. <code class="highlighter-rouge">AWS ECR</code>에 있는 이미지를 받아오는 부분은 젠킨스가 할 일이다.<br />
2편에서는 젠킨스를 설정한 방법을 정리했다.</p>

:ET