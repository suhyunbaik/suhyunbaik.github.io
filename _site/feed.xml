<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A python developer</title>
    <description>A pythonist in startup</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 29 Nov 2020 23:11:56 +0900</pubDate>
    <lastBuildDate>Sun, 29 Nov 2020 23:11:56 +0900</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>

    
      <item>
        <title>번역 | 장고에서 리퀘스트를 처리하는 방법</title>
        <description>&lt;ol&gt;
  &lt;li&gt;신호수신&lt;/li&gt;
  &lt;li&gt;핸들러의 작동&lt;/li&gt;
  &lt;li&gt;리퀘스트 처리 시작&lt;/li&gt;
  &lt;li&gt;미들웨어 처리 1&lt;/li&gt;
  &lt;li&gt;레솔루션 타임&lt;/li&gt;
  &lt;li&gt;미들웨어 처리 2&lt;/li&gt;
  &lt;li&gt;뷰(View)&lt;/li&gt;
  &lt;li&gt;응답시간(Response time)&lt;/li&gt;
  &lt;li&gt;미들웨어 처리 3: 예외&lt;/li&gt;
  &lt;li&gt;무응답&lt;/li&gt;
  &lt;li&gt;미들웨어 처리 4: 마지막 단계&lt;/li&gt;
  &lt;li&gt;응답&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://www.b-list.org/weblog/2006/jun/13/how-django-processes-request/&quot;&gt;How Django processes a request&lt;/a&gt; 번역글입니다.&lt;/p&gt;

&lt;h5 id=&quot;1-신호-수신&quot;&gt;1. 신호 수신&lt;/h5&gt;

&lt;p&gt;2가지 방법으로 장고 앱을 invoke한다.&lt;/p&gt;

&lt;p&gt;1 아파치/모드파이선(apache/mod_python) 서버가 셋업되어있을 경우, 모드 파이선이 리퀘스트를 장고에게 전달하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.core.hanlders.modpython.ModPythonHandler&lt;/code&gt; 인스턴스를 생성한다.&lt;/p&gt;

&lt;p&gt;2 &lt;code class=&quot;highlighter-rouge&quot;&gt;WSGI&lt;/code&gt;를 준수하는 다른 요소일경우 장고 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.core.handlers.wsgi.WsgiHandler&lt;/code&gt; 인스턴스를 생성한다.&lt;/p&gt;

&lt;h5 id=&quot;2-핸들러의-작동&quot;&gt;2. 핸들러의 작동&lt;/h5&gt;

&lt;p&gt;핸들러가 인스턴스화 되면, 다음과 같은 과정을 거친다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;핸들러가 장고 세팅 파일을 임포트한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;장고의 커스텀 익셥센 클래스를 임포트한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;3핸들러는 자체 &lt;code class=&quot;highlighter-rouge&quot;&gt;load_middleware&lt;/code&gt; 메소드를 호출하고, 해당 메소드는 세팅파일의 &lt;code class=&quot;highlighter-rouge&quot;&gt;MIDDLEWARE_CLASSES&lt;/code&gt; 에 나열된 미들웨어 클래스들을 불러온다.&lt;/p&gt;

&lt;p&gt;미들웨어는 4가지 상태에 대한 후킹이 가능하다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;process_request&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;process_view&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;process_response&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;process_exception&lt;/code&gt;) 핸들러가 미들웨어를 검사할때는 메소드 이름으로 검사한다.&lt;/p&gt;

&lt;h5 id=&quot;3-리퀘스트-처리-시작&quot;&gt;3. 리퀘스트 처리 시작&lt;/h5&gt;

&lt;p&gt;리퀘스트를 처리할 준비가 다 됐기 때문에, 시그널 &lt;code class=&quot;highlighter-rouge&quot;&gt;request_started&lt;/code&gt; 를 디스패칭한다. 모드 파이선과 WSGI 가 리퀘스트를 다르게 처리하기 때문에 모드 파이선일 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.core.handlers.modpython.ModPythonRequest&lt;/code&gt; 를, WSGI 일 경우에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.core.hanlders.wsgi.WSGIRequest&lt;/code&gt; 라는 클래스를 사용한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt; 가 전달되면 핸들러가 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt;  메소드를 호출하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt; 를 인자로 전달한다.&lt;/p&gt;

&lt;h5 id=&quot;4-미들웨어-처리-1&quot;&gt;4. 미들웨어 처리 1&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt; 는 핸들러의 &lt;code class=&quot;highlighter-rouge&quot;&gt;_request_middleware&lt;/code&gt; 인스턴스 변수를 순회하면서 리스트 내 각 메소들르 호출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt; 인스턴스를 아규먼트로 전달한다. 이 메소드들은 처리 과정을 무시하고 바로  &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt; 를 반환할 수 있는 옵션이 있다. 만약 메소드 중 하나가 바로 반환을 한다면, 메인 핸들러 코드로 돌아가고 남은 미들웨어 클래스는 무시한다.&lt;/p&gt;

&lt;h5 id=&quot;5-레솔루션-타임&quot;&gt;5. 레솔루션 타임&lt;/h5&gt;

&lt;p&gt;미들웨어중 어느것도 리스폰스를 즉시 반환하지 않았다면, 핸들러는 요청된 URL를 분석한다. 핸들러는 세팅 파일에 있는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ROOT_URLCONF&lt;/code&gt; 를 읽고,  &lt;code class=&quot;highlighter-rouge&quot;&gt;django.core.urlresolvers.RegexURLResolver&lt;/code&gt; 인스턴스를 만든 뒤 해당 인스턴스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve&lt;/code&gt; 메소드를 호출한다.&lt;/p&gt;

&lt;p&gt;만약 매칭되는 url 이 없다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.core.urlresolvers.Resolver404&lt;/code&gt; 예외를 발생시킨다.&lt;/p&gt;

&lt;h5 id=&quot;6-미들웨어-처리-2&quot;&gt;6. 미들웨어 처리 2&lt;/h5&gt;

&lt;p&gt;뷰 함수가 사용된다면 핸들러가 &lt;code class=&quot;highlighter-rouge&quot;&gt;_view_middleware&lt;/code&gt; 리스트에 있는 메소드르 호출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt; 를 전달한다. 이 단계에서도 미들웨어가 개입해 핸들러가 바로 리스폰스를 반환하도록 할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;7-뷰&quot;&gt;7. 뷰&lt;/h5&gt;

&lt;p&gt;장고는 무엇이든지 간단한 요구조건 몇가지만 들어맞으면 뷰로 분류한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;호출가능해야한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;첫번쨰 인자로 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.http.HttpRequest&lt;/code&gt; 의 인스턴스를 받는다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;django.http.HttpResponse&lt;/code&gt; 인스턴스를 반환하거나 예외를 발생시킨다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;8-응답시간response-time&quot;&gt;8. 응답시간(Response time)&lt;/h5&gt;

&lt;p&gt;템플릿이 있을 경우, 템플릿이 렌더링 된 후, 또는 그에 상응하는 결과가 생성된 후에는 뷰가 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.http.HttpResponse&lt;/code&gt; 인스턴스를 생성할 책임이 있다. 이 클래스의 생성자는 2가지 선택적 인수를 받는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;리스폰스 바디에 담을 스트링&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;리스폰스 헤더 &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; 의 값&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;9-미들웨어-처리-3-예외&quot;&gt;9. 미들웨어 처리 3: 예외&lt;/h5&gt;

&lt;p&gt;뷰에서 예외가 발생하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;_exception_middleware&lt;/code&gt;에 있는 메소드를 호출해 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt; 와 예외를 인자로 전달한다. 호출된 메소드 중 하나가 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;를 반환한다.&lt;/p&gt;

&lt;h5 id=&quot;10-무응답&quot;&gt;10. 무응답&lt;/h5&gt;

&lt;p&gt;아래와 같은 경우일때  &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt; 를 반환한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;뷰가 값을 반환하지 않음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;뷰가 예외를 발생시키지만 그걸 처리할수 있는 미들웨어가 없음&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;예외를 처리하는 미들웨어에서 새 예외사항이 발생함&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이러한 상황이 발생할 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt; 가 자체적으로 에러를 처리한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;http404&lt;/code&gt; 예외가 발생하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG=True&lt;/code&gt; 일 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.views.debug.technical_404_response&lt;/code&gt; 라는 뷰를 실행하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt; 와 익셉션을 전달한다. 이 뷰는 URL Resolver 가 매치하려고 햇었던 패턴에 대한 정보를 표시한다.&lt;/li&gt;
  &lt;li&gt;만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG=False&lt;/code&gt; 이면 익셉션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Http404&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt; 가 URL Resolver 의 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve_404&lt;/code&gt; 를 호출한다. 이 메소드는 url 설정을 읽어서 어떤 뷰가 404 에러를 핸들링 해야 하는지 찾는다. 디폴트 값은 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.views.defaults.page_not_found&lt;/code&gt; 이지만, 변수 &lt;code class=&quot;highlighter-rouge&quot;&gt;hanlder404&lt;/code&gt;에 값을 할당해 URL 설정을 오버라이드 할 수 있다.&lt;/li&gt;
  &lt;li&gt;익셉션의 종류에 상관없이, &lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG=True&lt;/code&gt; 일 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt;가 &lt;code class=&quot;highlighter-rouge&quot;&gt;django.views.debug.technical_500_response&lt;/code&gt; 뷰를 실행하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;와 익셉션을 인자로 전달한다. 이 뷰는 트레이스백, 스택 각 레벨의 지역 변수, 등 자세한 정보를 제공한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DEBUG=False&lt;/code&gt; 일 경우, &lt;code class=&quot;highlighter-rouge&quot;&gt;get_response&lt;/code&gt; 가 URL 리졸버의 &lt;code class=&quot;highlighter-rouge&quot;&gt;resolve_500&lt;/code&gt; 메소들르 호출하고, 3번고 비슷한 방법으로 작동한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;추가적으로, &lt;code class=&quot;highlighter-rouge&quot;&gt;django.http.Http404&lt;/code&gt; 또는 파이선 빌트인 &lt;code class=&quot;highlighter-rouge&quot;&gt;SystemExit&lt;/code&gt; 이외의 익셉션일 경우, 핸들러는 디스패처 신호 &lt;code class=&quot;highlighter-rouge&quot;&gt;got_request_exception&lt;/code&gt;을 실행하고 반환하기 전에 장고 admins 설정에 리스팅된 사람들에게 메일을 발송하기전에 예외에 대한 설명을 만든다.&lt;/p&gt;

&lt;h5 id=&quot;11-미들웨어-처리-4-마지막-단계&quot;&gt;11. 미들웨어 처리 4, 마지막 단계&lt;/h5&gt;

&lt;p&gt;이 단계에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt; 인스턴스를 반환한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;_response_middleware&lt;/code&gt;의 메소드를 호출하고, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpRequest&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;HttpResponse&lt;/code&gt;를 인자로 전달한다. 이 단계는 미들웨어가 변화을 일으킬 수 있는 마지막 단계다.&lt;/p&gt;

&lt;h5 id=&quot;12-응답&quot;&gt;12. 응답&lt;/h5&gt;

&lt;p&gt;이제 마지막 단계다. 핸들러가 디스패처 시그널 &lt;code class=&quot;highlighter-rouge&quot;&gt;request_finished&lt;/code&gt; 를 발생시킨다. 이 신호를 받은 핸들러는 현재 리퀘스트를 위해 사용했던 자원들을 정리하고 해제한다. 예를 들어, 장고는 열러있는 모든 데이터베이스 커넥션을 닫는  &lt;code class=&quot;highlighter-rouge&quot;&gt;request_finished&lt;/code&gt; 에 리스너를 연결한다. 이 작업 뒤에, 핸들러는 적절한 반환할 값을 만들고 반환한다.&lt;/p&gt;

&lt;p&gt;이렇게 해서 장고가 리퀘스트를 다루는 처음부터 마지막 까지 과정을 훑어보았다.&lt;/p&gt;

&lt;h5 id=&quot;references&quot;&gt;References&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.b-list.org/weblog/2006/jun/13/how-django-processes-request/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 23 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/django/2020/11/23/how-django-processes-a-request/</link>
        <guid isPermaLink="true">http://localhost:4000/django/2020/11/23/how-django-processes-a-request/</guid>
      </item>
    
      <item>
        <title>2020년 회고</title>
        <description>&lt;p&gt;2019-2020년에 사건 사고가 많았고 신기한 경험도 해서 회고를 해보았다.&lt;/p&gt;

&lt;h5 id=&quot;잦은-이직&quot;&gt;잦은 이직&lt;/h5&gt;

&lt;p&gt;여러가지 사정으로 인해 이직을 자주 했다. 거쳐간 회사들을 돌아보니 각 회사 서비스마다 도메인은 다 다른데  몇가지 공통점이 있었다. 먼저 타겟 국가가 한국이 아니거나, 한국을 포함한 많은 나라를 타켓팅하는 글로벌 서비스다. 개발과 데브옵스 일을 같이 한다. 나는 데브옵스 일을 하면서 많은 경험을 할 수 있어서 좋았다.&lt;/p&gt;

&lt;p&gt;AWS Opsworks 를 jenkins 로 교체하고, EC2 에서 ECS Fargate 로 교체하는 경험을 했다. Fargate 로 굴러가는 서비스를 운영하면서 여러 troubleshooting 을 경험했다. jenkins 를 구축하면서 ci/cd 를 경험했다. 모니터링이 전혀 구축되어 있지 않아서 newrelic 을 달았다가 sentry 를 구축해서 newrelic 을 교체했다. 기타 등등 많은 일을 경험했다.&lt;/p&gt;

&lt;p&gt;파이선 2.X를 3.X로 포팅하면서 아키텍쳐에 대한 고민을 했다. 이전에는 아키텍쳐의 중요성을 체감하지 못했었었다. 여러가지 레거시 프로젝트를 경험하고 나니, 아키텍쳐 이론을 갖추고 구체화하는 경험의 필요성을 느꼈다.&lt;/p&gt;

&lt;h5 id=&quot;구인의-어려움&quot;&gt;구인의 어려움&lt;/h5&gt;

&lt;p&gt;입사하고 나서 바로 구인을 진행했다. 이상적인 동료상에 대해서 테크리드와 대화를 많이 나눴고, 면접시 체크 리스트도 만들었다. 우리는 글로벌 서비스를 준비하고 있다. 구성원들이 글을 읽고 쓰는 취미가 있어 글을 연재했거나 기고했던 경험이 있다. 지금도 팀 블로그에 토픽을 정해서 글 쓰는 일자가 구성원별로 스케쥴링 해 관리한다.&lt;/p&gt;

&lt;p&gt;우리와 같이 서비스를 만들 동료도 글로벌 서비스를 해보았거나, 하고 싶어했으면 좋겠다. 글을 쓰고 읽는 취미가 있어 블로그를 운영하거나 글을 기고해본 경험이 있었으면 좋겠고, 개발 및 제품의 완성도도 추구하면서 비즈니스 도메인의 생태계에 긍정적인 영향을 미치고 싶어했으면 좋겠다.&lt;/p&gt;

&lt;p&gt;이렇게 정리해보고 나니 구인이 어렵겠다는 생각이 들었다. 그러나 몇번의 면접을 진행해본 결과 기준은 절대 완화해선 안된다는 결론을 내렸다.&lt;/p&gt;

&lt;h5 id=&quot;프로젝트의-단계&quot;&gt;프로젝트의 단계&lt;/h5&gt;

&lt;p&gt;팀을 세팅하는 상태에서 참여에 제품을 만드는 경험은 이번이 처음이다. 백엔드 조직은 팀원이 없다. 팀장만 있고 팀원만 있으니 홍철 없는 홍철팀 상태라고 할 수 있겠다. 이직할때마다 이미 서비스 중인, 성숙한 상태의 프로덕트를 유지보수하는 역할을 많이 맡았었기 때문에 이런 경험이 신선하다. 그리고 이직하면서 아주 초기 단계부터 참여해서 프로덕트 개발 경험을 얻고 싶다는 바람이 있었는데 그게 충족되서 좋다.&lt;/p&gt;

&lt;h5 id=&quot;기록의-효용성&quot;&gt;기록의 효용성&lt;/h5&gt;

&lt;p&gt;사실 2019년 겨울 ~ 2020년 초 봄에 정기 기고를 기획했다. 그런데 그 글이 어떻게 퍼져서 주위의 몇몇 분들이 읽어보고 피드백을 주셨다. 그 중에 가장 인상깊었던 피드백은 이 글을 읽고 개발자로서의 정체성과 미래에 대한 불안과 근심이 있었는데 어느정도 해소가 되었고 힘이 됐다는 피드백이다. 글을 쓰기 전에는 나의 경험을 공유함으로써 다른 사람들이 더 나은 선택을 할 수 있도록 긍정적인 영향을 미치고 싶다는 의도가 가득했는데, 막상 글을 쓸 때에는 ‘이 글이 남에게 도움이 되긴 하나’, ‘그전에 누가 읽기는 하나’ 하는 의심이 컸다. 시간이 걸렸지만 결국 나의 바램대로 도움이 되었다고 하니 기분이 좋았다. 뭐든지, 기록을 남기면 누군가는 그걸 읽게되고 그렇게 가치가 생기나보다.&lt;/p&gt;

&lt;p&gt;2021년에는 코로나 백신이 나와서 접종을 받을 수 있으면 좋겠고, 좋은 팀원을 만났으면 좋겠다. 그리고 프로덕트가 예상했던 모습대로 만들어졌으면 좋겠다.&lt;/p&gt;

</description>
        <pubDate>Fri, 20 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/retrospective/2020/11/20/2020-retrospective/</link>
        <guid isPermaLink="true">http://localhost:4000/retrospective/2020/11/20/2020-retrospective/</guid>
      </item>
    
      <item>
        <title>파이선, 장고로 제프리 팔레르모의 'onion architecture' 구현해보기</title>
        <description>&lt;p&gt;목차&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;어니언 아키텍쳐 소개&lt;/li&gt;
  &lt;li&gt;어니언 아키텍쳐가 해결하는 문제&lt;/li&gt;
  &lt;li&gt;파이선, 장고로 구현한 어니언 아키텍쳐
    &lt;ul&gt;
      &lt;li&gt;Model, Service, View 구조&lt;/li&gt;
      &lt;li&gt;model과 domain model&lt;/li&gt;
      &lt;li&gt;service 와 application service, domain service&lt;/li&gt;
      &lt;li&gt;다이어그램과 코드&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;DDD와 어니언 아키텍쳐와의 관계&lt;/li&gt;
  &lt;li&gt;References&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;어니언-아키텍쳐-소개&quot;&gt;어니언 아키텍쳐 소개&lt;/h5&gt;

&lt;p&gt;어니언 아키텍쳐(onion architecture)는 2008년에 제프리 팔레르모가 만든 패턴 입니다. 어니언 아키텍쳐를 적용하기에 좋은 대상은 복잡한 기능이 많고 장기간 사용할 비즈니스 어플리케이션이며, 소규모 웹 어플리케이션에는 적합하지 않습니다. 이 아키텍쳐는 전통적인 계층적 아키텍쳐 (layered architecture)와 헥사고날 아키텍쳐(Hexagonal architecture)와 비슷한 부분이 많습니다. 계층적 아키텍쳐처럼 어니언 아키텍쳐도 계층이라는 단어를 사용하지만 의미는 약간 다르며, 3-tire 와 n-tier 아키텍쳐에 있는 문제점을 해결한 아키텍쳐입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://herbertograca.files.wordpress.com/2017/07/1980s-90s-layered-architecture.png?w=1100&quot; alt=&quot;layered architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;전통적인 레이어드 아키텍쳐를 표현한 다이어그램&lt;/p&gt;

&lt;p&gt;전통적인 계층적 아키텍쳐는 계층(layer)으로 이뤄집니다. 각 계층은 자신보다 하위에 있는 계층에 의존합니다. 각 계층은 하위 계층만 호출할 수 있습니다다. 모든 계층은 소프트웨어에서 공통으로 사용하는 인프라나 유틸리티 서비스에 의존합니다.&lt;/p&gt;

&lt;p&gt;인프라, 유틸리티 서비스와 관련된 코드가 전 계층에 있기 때문에 모든 계층이 종국에는 뒤섞이면서 서로 강결합해버립니다. 이런 결합이 생기면, UI와 비즈니스 로직의 결합이 발생해 데이터 접근방식에 영향을 줍니다. 가장 흔히 발생하는 문제는 비즈니스 로직이 없어서 UI 도 없는 문제입니다. 데이터 접근 부분이 없어서 비즈니스 로직도 없는 경우도 생깁니다. 데이터 접근 방식은 업계 통상 2년마다 바뀌는데, 계층적 아키텍쳐가 적용된 소프트웨어라면 인프라와 강결합된 코드가 전 계층에 퍼져 있을테니 데이터베이스를 교체할때 비싼 유지보수 비용을 지불하게 됩니다.&lt;/p&gt;

&lt;p&gt;제프리 팔레르모가 제안한 어니언 아키텍쳐는 위에 언급된 단점을 개선한 아키텍쳐입니다.&lt;/p&gt;

&lt;h5 id=&quot;어니언-아키텍쳐가-해결하는-문제&quot;&gt;어니언 아키텍쳐가 해결하는 문제&lt;/h5&gt;

&lt;p&gt;&lt;img src=&quot;https://i0.wp.com/jeffreypalermo.com/wp-content/uploads/2018/06/image257b0257d255b59255d.png?resize=366%2C259&amp;amp;ssl=1&quot; alt=&quot;onion architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;어니언 아키텍쳐의 주 관심사는 내부/외부 구획을 짓기와 결합의 조종입니다. 모든 코드는 해당 영역보다 더 중심부에 가까운 영역에 있는 요소에 의존할 수 있지만, 바깥으로 향하는 영역에 있는 요소에 의존하면 안됩니다. 각 계층은 서로 소통할때 인터페이스를 사용합니다. 어니언 아키텍쳐는 기존의 n-tier 아키텍쳐와는 다르게 데이터 계층에 의존하지 않습니다. 대신 도메인 모델 계층에 의존합니다.&lt;/p&gt;

&lt;p&gt;아키텍쳐 중심부에는 도메인 모델이 있습니다. 도메인 모델은 다른 무엇과도 결합하지 않습니다. 도메인 모델 계층, 도메인 서비스계층, 어플리케이션 서비스 계층을 포함하는 어플리케이션 코어는 여러 계층으로 나눠질 수 있습니다. 나누는 계층 갯수는 제한이 없습니다. 필요한대로 나누면 됩니다. 그러나 도메인 모델 계층은 반드시 중심에 있어야 합니다.&lt;/p&gt;

&lt;p&gt;오브젝트를 저장하는 행위는 어플리케이션 코어에 없다. 인프라인 데이터베이스와 연관성이 있기 때문입니다. 어플리케이션 코어에는 인터페이스만 있어야 합니다. 바깥 원은 자주 바뀌는 요소들을 위한 자리입니다. UI, 인프라, 테스트 등이 여기에 속합니다. 변화가 자주 일어나는 요소들은 반드시 어플리케이션의 코어에서 분리되어야 합니다. 이러한 요소들 중에는 데이터 접근 방식이 있습니다. 데이터 접근 방식은 통상 2년 단위로 크게 바뀌고 데이터베이스에 강하게 의존하기 때문에 분리되야 합니다. 데이터베이스도 소프트웨어 구성에서 외부에 속해야 합니다. 데이터베이스, 파일시스템, 등등을 어플리케이션에서 결합되지 않게해 어플리케이션 유지 보수 비용을 줄입니다.&lt;/p&gt;

&lt;p&gt;어니언 아키텍쳐의 각 계층을 간략해게 정리하자면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;도메인 모델 계층: 도메인 오브젝트와 도메인 인터페이스가 있는 계층. 의존성이 없습니다.&lt;/li&gt;
  &lt;li&gt;도메인 서비스 계층: 도메인 모델 계층과 어플리케이션 서비스 계층을 연결합니다. 이 계층에서 오브젝트를 갖고오거나 저장하는 등, 데이터베이스와 연관된 작업을 수행하는 인터페이스를 둡니다.&lt;/li&gt;
  &lt;li&gt;어플리케이션 서비스 계층: 어플리케이션 종속적인 비즈니스 로직이 있는 계층.  (예: usecase)&lt;/li&gt;
  &lt;li&gt;외부 계층: UI, 데이터베이스, 테스트와 같이 변화가 잦은 요소들이 있는 계층. 웹 어플리케이션일 경우에는 이 계층에 웹 API 또는 유닛 테스트가 있습니다. 이 계층은 인터페이스를 통해 내부 계층과 연결됩니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;계층들은 서로를 감싸면서 양파같은 모양을 형성합니다. 어니언은 외부 계층은 하위 계층에 의존할 수 있지만, 하위 계층은 외부 계층에 있는 코드를 직접 호출할 수 없다는 의존성 규칙이 있습니다. 각 계층은 의존성 규칙에 따라서 상호작용합니다.&lt;/p&gt;

&lt;p&gt;어니언 아키텍쳐의 주 특징을 간단하게 4가지로 정리하면 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;어플리케이션은 독립적인 오브젝트 모델로 개발해야 합니다.&lt;/li&gt;
  &lt;li&gt;내부 원은 인터페이스를 정의한다. 외부 원은 인터페이스를 구현합니다.&lt;/li&gt;
  &lt;li&gt;결합 방향은 중앙을 향해야 합니다.&lt;/li&gt;
  &lt;li&gt;모든 어플리케이션 코어 코드는 인프라와 별개로 컴파일될 수 있고 실행될 수 있어야 합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;파이선-장고로-구현한-어니언-아키텍쳐&quot;&gt;파이선, 장고로 구현한 어니언 아키텍쳐&lt;/h5&gt;

&lt;p&gt;카페에서 커피 주문을 받거나 고객의 주문을 관리하는 시스템을 어니언 아키텍쳐로 구현해보기로 합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Model, Service, View 구조&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;먼저 보통 파이선 장고 프로젝트를 시작할떄 흔히 사용하는  model, service, view 구조로 개발해보도록 합니다. 카페, 고객, 주문 모델링은 장고 ORM 으로 구현합니다.&lt;/p&gt;

&lt;p&gt;models.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.db&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AutoField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ForeignKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_delete&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CASCADE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;카페에 커피를 주문하고, 주문을 관리할 수 있는 비즈니스 로직을 구현합니다. 카페와 고객의 아이디를 받아서 데이터베이스의 주문 테이블에 주문을 저장히고, 저장된 주문 데이터를 불러와 주문 객체로 만들어서 해당 객체를 가지고 비즈니스 로직을 수행해야 합니다. 데이터를 불러오거나 저장할때는 ORM을 사용합니다. ORM 을 사용하기 때문에 데이터 접근, 데이터 객체 변환 계층은 필요없다. ORM 이 그 역할을 동시에 수행합니다.&lt;/p&gt;

&lt;p&gt;service.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderCoffeeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order_coffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderDomainModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;간단한 API를 작성합니다. API 는 service 에서 반환한 객체를 serializer 를 통해 직렬화 한뒤 외부에 반환합니다.&lt;/p&gt;

&lt;p&gt;serializer.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;rest_framework&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderResponseSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntegerField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;views.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;django.http&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cafe.application_service&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_coffee_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_service&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cafe.serializer&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderResponseSerializer&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order_coffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;order_coffee_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_coffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderResponseSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;보통 장고로 구현한 backend용 파이선 프로젝트는 위의 구조를 많이 사용하는 것 같습니다. 이제 위 코드를 어니언 아키텍쳐 다이어그램과 최대한 비슷하게 구현해봅시다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;model 과 domain model&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;어니언 아키텍쳐 규칙에 따라 인프라와 연관된 코드를 다른 코드에서 분리해야 합니다. 여기서는 인프라 코드가 장고 ORM 입니다. ORM으로 작성한 model은 데이터베이스에 접근해서 데이터를 가져오는 용도로만 사용합니다. ORM으로 가져온 데이터는 객체상태로 존재하지만 해당 객체를 바로 쓰지 않습니다. 도메인 모델을 통해서 객체로 만듭니다.&lt;/p&gt;

&lt;p&gt;domain_models.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dataclasses&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;cafe.models&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Customer&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CafeDomainModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataclass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderDomainModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;classmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;service 와 application service, domain service&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Service 계층은 2가지의 다른 작업을 동시에 수행합니다. 하나는 비즈니스 로직이고 또 하나는 객체를 가지고 수행하는 작업입니다. Cafe 또는 Order 객체를 갖고오거나 객체를 삭제, 수정, 저장하는 행위는 어니언 아키텍쳐에서 Object Service에 해당합니다. 주문을 조회하고 커피 주문을 하는 행위는 Application Service 입니다. 먼저 Object service 에서 사용할 추상클래스를 정의합니다.&lt;/p&gt;

&lt;p&gt;object_service.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;abc&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ObjectService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ABC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abstractmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;추상클래스를 상속해 cafe object service 와 order object service를 구현합니다.&lt;/p&gt;

&lt;p&gt;object_service.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CafeObjectService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Cafe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderObjectService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ObjectService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DoesNotExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Order Does not exist'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;비즈니스 로직이 있는 application service 는 이제 object service 로 비즈니스 로직을 수행합니다.&lt;/p&gt;

&lt;p&gt;application_service.py&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderCoffeeService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_object_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CafeObjectService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  	&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cafe_object_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_object_service&lt;/span&gt;
    
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;order_coffee&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;cafe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_object_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cafe_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_cafe_object_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OrderService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_object_service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderObjectService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_object_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_object_service&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderDomainModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_object_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OrderDomainModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;다이어그램&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://suhyunbaik.github.io/images/posts/python_django_onion.png&quot; alt=&quot;python_django_onion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;완성된 코드는 &lt;a href=&quot;https://github.com/suhyunbaik/python-django-onion&quot;&gt;여기서&lt;/a&gt; 확인할 수 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;ddd와의-관계&quot;&gt;DDD와의 관계&lt;/h5&gt;

&lt;p&gt;어니언 아키텍쳐와 DDD는 성취하려는 목표가 다릅니다. 어니언 아키텍쳐는 도메인과 비즈니스 로직을 데이터 접근, UI, 인프라와 같은 영역에 의존하지 않고 독립적인 영역으로 만드는 게 목표입니다. 그래서 어니언 아키첵쳐에서는 도메인 모델에 대한 설명이 적습니다. 대신 도메인을 보호하는 방법에 대해 설명하는데 많은 부분을 할애합니다. 다이어그램에서 볼 수 있듯이, 어플리케이션을 내/외부로 구획을 짓고 서로 결합하지 않도록 강력하게 관리하는 방법이 어니언 아키텍쳐의 주요 관심사입니다.&lt;/p&gt;

&lt;p&gt;DDD는 도메인과 객체를 비즈니스 세계와 가장 가깝게 설계하고 비즈니스 세계와 코드상의 간극을 줄이는게 목표입니다. 도메인은 비즈니스 도메인과 직접적인 연관관계가 있어야 하며, 각 객체는 실제 환경에서 해당 객체가 상징하는 요소가 하는 행동과 동일한 행동을 해야 하고 동일한 규칙을 가져야 합니다. 어니언 아키텍쳐에서 Domain model, Domain Service 라고 부르는 영역을 설계하는 방법이 주요 관심사입니다.&lt;/p&gt;

&lt;p&gt;어니언 아키텍쳐와 DDD를 한 어플리케이션에 사용한다면 각 아키텍쳐의 장단점을 적절하게 취할 수 있다는 생각이 듭니다. 어니언 아키텍쳐로 내/외부 부분을 확실하게 구분지어 의존성을 조절하고, DDD로 비즈니스에 가장 가까운 도메인 및 객체 설계를 한다면 좋을 것 같습니다.&lt;/p&gt;

&lt;p&gt;현재 제트팀은 백엔드에 적용할 아키텍쳐를 검토 중입니다. 어니언 아키텍쳐도 논의 대상 중 하나이며, 향후 서비스에 이 아키텍쳐를 적용하는걸 기대해봅니다.&lt;/p&gt;

&lt;h5 id=&quot;references&quot;&gt;References&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;https://jeffreypalermo.com/2008/07/the-onion-architecture-part-1/&lt;/li&gt;
  &lt;li&gt;https://alistair.cockburn.us/coming-soon/&lt;/li&gt;
  &lt;li&gt;https://jeffreypalermo.com&lt;/li&gt;
  &lt;li&gt;https://www.infoq.com/news/2014/10/ddd-onion-architecture/&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Nov 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/architecture/2020/11/08/python-django-onion-structure/</link>
        <guid isPermaLink="true">http://localhost:4000/architecture/2020/11/08/python-django-onion-structure/</guid>
      </item>
    
      <item>
        <title>파이선으로 개발한 프롭테크 서비스 DDD 구조로 리팩토링</title>
        <description>&lt;p&gt;목차&lt;/p&gt;

&lt;p&gt;서비스를 context 로 분리하고 django app으로 구분&lt;br /&gt;
view, service, repository, model 로 분리&lt;br /&gt;
IoC Container 구현&lt;br /&gt;
부분적 경계를 facades 로 구현&lt;br /&gt;
밸류 오브젝트를 엔티티로 변경&lt;br /&gt;
후기&lt;/p&gt;

&lt;p&gt;깃허브 https://github.com/suhyunbaik/buba-service&lt;br /&gt;
몇년전에 프롭테크 서비스를 개발했었다. 사업적인 문제로 서비스를 접었는데 최근에 코드를 다시 살펴보니 개선할 부분이 많았다. 그 당시 서비스를 개발할때는 팀 내에 도메인 전문가가 없었고 구조에 대한 고민을 미처 못했다. 이번에는 리팩토링을 하면서 DDD를 적용해보기로 했다. 이 서비스는 프롭테크 서비스 이지만 직방, 다방과 타켓층이 다르다. 직방, 다방은 집을 알아보는 임차인이 타켓이지만, 이 서비스는 공인중개사가 타켓이다. 공인중개사의 업무 효율을 높이고 본인이 갖고있는 매물의 특징과 정보를 분석해서 영업에 도움이 되는 게 이 서비스의 목표다.&lt;/p&gt;

&lt;p&gt;서비스를 context 로 분리하고 django app으로 구분&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/context_map.png&quot; alt=&quot;context_map&quot; /&gt;&lt;/p&gt;

&lt;p&gt;기존 코드는 기능별로 경계가 없어서 마치 큰 진흙덩어리처럼 기능이 서로 단단하게 강결합 된 상태다. 코드를 분리하기 위해서 먼저 서비스를 정리한다. 해당 서비스의 기능은 크게 매물 관리, 고객관리, 공동중개망, 문자 서비스, 공인중개사 관리로 나눌 수 있다. DDD 에서 말하는 bounded context 로 서비스를 나눠보자면 customer(고객), listing(매물), sms(문자), realtor(공인중개사)로 나눌 수 있다. 여기서 매물 관리는 product(공간정보), listing(매물) 이라는 2개의 bounded context 로 나눈다. 그리고 listing(매물) 이라는 context 에는 multiple listing(공동중개망) 이라는 aggregate 을 만든다.  매물관리를 이렇게 나눈 이유는 밑에 나온다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;view, service, repository, model 로 분리&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;기존 코드는 장고 공식문서에 설명하는 MVT(model view, template) 패턴을 따랐기 때문에 views.py 에 비즈니스 로직이 있었다. 이번에는 DDD를 적용하기로 했으므로, DDD에 맞춰서 코드를 나눈다. view는 요청을 받고 serialize, deserilaizer를 수행하며, 클라이언트에게 응답을 준다. service 는 여러 서비스와 리포지토리를 가지고 비즈니스 로직을 수행한다. repository 는 model 에서 밸류 오브젝트를 갖고온다. model 은 장고 내부 인프라 레이어와 연결되고, 그대로 RDS DB와 연결된다. 한개의 app은 4개 레이어 계층으로 구성한다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# views
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealtorMyselfView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;APIView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;authentication_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TokenAuthentication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;permission_classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IsAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'realtor_service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;realtor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealtorSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'data'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# services 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealtorService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realtor_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realtor_repository&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_realtors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_all_realtors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_realtor_by_realtor_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register_realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SignUpRequestSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                                               &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'phone_number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# repository
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RealtorRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;realtor_dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realtor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_all_realtors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_realtor_by_realtor_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SignUpRequestSerializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NoReturn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;realtor_dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                                     &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;phone_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'phone_number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# models
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Realtor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AbstractBaseUser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PermissionsMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;REQUIRED_FIELDS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'phone_number'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;USERNAME_FIELD&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'username'&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose_name_plural&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'공인중개사'&lt;/span&gt;

    &lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UUIDField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary_key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uuid4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;editable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'아이디'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CharField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;max_length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verbose_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'이름'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealtorManager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;IoC Container 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/container.png&quot; alt=&quot;container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;해당 서비스를 개발할때 초반에는 어려움이 없었는데, 후반으로 갈수록 기능이 다양해지고 복잡도가 증가하면서 circualr import 처럼 잘못된 설계에서 기인하는 문제가 계속 터져서 고통을 겪었었다. 그 때 당시에는 의존성도 관리대상이라는 사실을 몰랐기 때문에 개발하다보니 import 에 import 가 꼬리를 물었고 이게 에러를 발생시켰다. 이번에는 의존성을 제어하기 위해 스프링 프레임워크를 참조했다.&lt;/p&gt;

&lt;p&gt;스프링 프레임워크에는 객체의 생성 및 생명주기를 관리하는 IoC 컨테이너가 있다. 스프링으로 프로덕션 개발을 한 경험이 없어서 깊이있게 알지 못하지만, 내가 아는 바로는 앱이 실행될때 컨테이너가 떠서 미리 필요한 객체들을 생성하고 이 객체들은 빈이라고 부르며, 자바 어노테이트를 사용해 미리 생성할 객체를 등록할 수 있다고 알고 있다. 장고에는 컨테이너가 없고 객체 등록용 어노테이트가 없기 때문에 직접 만들어서 써야한다. 각 앱마다 컨테이너를 1개씩 만들고, 컨테이너 클래스가 인스턴스화 되면 해당 앱에서 사용하는 객체들을 생성해서 들고있도록 한다. 의존성 주입 방법은 스프링에서는 setter, method, constructor 3가지 방법이 있는데, 이 프로젝트에서는 constructor 방식만 사용했다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;register_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'realtor_repository'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealtorRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'realtor_service'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RealtorService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'realtor_repository'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deps&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'{name} instance does not exists'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;component&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;register_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;부분적 경계를 facades로 구현&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/facades.png&quot; alt=&quot;facades&quot; /&gt;&lt;/p&gt;

&lt;p&gt;가끔은 다른 bounded context에 있는 service에 접근할 필요한 경우가 있다. 해당 서비스에서는 customer 앱에서 listing 앱에 접근해 해당 customer가 관심을 보였던 매물정보를 갖고오는 기능이 있다. 클린 아키텍쳐 책 24장에서는 부분적 경계 구현 방법으로 크게 3가지를 제시하고 있는데, 첫번째는 단계를 건너뛰기, 두번째는 일차원 경계(boundary interface 사용), 세번째는 퍼사드 패턴을 이용하는 방법이다. 이 중에서 퍼사드를 사용하는 방법을 선택했다. 
고객 상세 정보를 들고오는 API 는 고객이 보고 간 매물 정보도 같이 보여준다. 매물 정보는 매물 컨텍스트 안에 있기 때문에 다른 django app 으로 분리되어있다. customer service 에서 listing service 로 직접 접근하지 않고, listing facades 를 만들어서 파사드를 통해 리스팅 컨텍스트에 접근한다. 이런 방법을 쓰면 실수로 다른 개발자가 listing service 의 메소드를 수정했을 경우 다른 api 가 영향 받는 범위를 줄일 수 있고, listing app 을 MSA로 만들 경우 facade 는 다른 서버와 통신하는 부분으로 만든다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# views 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_customer_detail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomerDetailResponseSerializer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'customer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'listings'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JsonResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serializer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# services
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomerService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listing_facades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_repository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_repository&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listing_facades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listing_facades&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_customer_favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listing_facades&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_customer_favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
&lt;span class=&quot;c1&quot;&gt;# facades 
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ListingFacades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listing_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listing_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listing_service&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_customer_favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;listing_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_customer_favorites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;밸류 오브젝트에서 엔티티로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;서비스를 개발하다가 사용자수가 어느정도 늘어나면서 유저가 본인이 사용하고 싶은 기능을 요구하는 경우도 있었는데, 기존 서비스의 구조와 맞지않거나 기능 개발에 필요한 시간이 많다는 이유로 개발하지 않고 그냥 지나간 경우가 있었다. 코드를 다시 뜯어보고 나니, 잘못된 모델링 때문에 이런저런 이유로 기능을 개발하지 못한 경우가 대부분이다. DDD에서 말하는 엔티티, 밸류 오브젝트에 대한 개념이 잡혀있었다면 저지르지 않았을 실수가 많이 보였다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공간정보과 거래형태를 분리하고 거래형태를 밸류 오브젝트에서 엔티티로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/product.png&quot; alt=&quot;product&quot; /&gt;&lt;br /&gt;
 가장 큰 실수는 공간에 대한 정보를 매물의 밸류 오브젝트로 모델링한 실수다. 당시에는 매물정보(전월세, 가격 등등 거래형태에 대한 정보)만 필요하다고 생각했고 공간정보(부동산 종류, 위치 등등)는 밸류 오브젝트라고 생각했다. 그런데 당시 서비스 유저가 해당 공간에 대한 내역이 쌓이는 기능을 원한다고 애기했을때 구현하기가 상당히 어려워졌다. 그래서 이번에는 매물과 공간정보를 분리하고 둘다 엔티티로 모델링 헀다. 예를 들어 대성 빌라 202동 101호 20평 전세 4억 매물이 있다면 대성빌라 202동 101호 20평은 product context 의 product entity 가 되고, 전세 3억은 listing context 의 listing entity 가 된다. product entity 는 listing entity 와 파트너 관게를 맺고, listing entity 는 customer 와 realtor entity 와 관계를 맺는다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;공인중개사와 공인중개사 사무소를 분리하고 사무소를 밸류 오브젝트에서 엔티티로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;부동산 거래 경험이 없거나 공인중개사의 근무형태를 잘 모르는 사람들은 공인중개사의 근무 형태가 회사의 일반적인 정규직 형태와 같을 거라고 생각한다. 예를 들면, 공인중개사A 는  A 사무소를 차려서 거기에만 근무한다고 생각한다. 이런 생각과 다르게 공인중개사의 근무형태는 다양하다. 공인중개사 A가 B,C,D 사무소를 동시에 운영하는 경우도 있고, 공인중개사 B가 공인중개사 A의 사무소 A에 월,화 만 출근하고 공인중개사 C의 E사무소에 수, 목, 금요일만 출근하는 등 다양한 근무형태를 보인다.&lt;/p&gt;

&lt;p&gt;이런 사실을 모르고 개발했을때는 공인중개사를 엔티티, 공인중개사 사무소를 밸류 오브젝트로 간주했다. 이럴 경우 프롭테크 서비스를 사용하는 공인중개사 A가 본인 사무소 A가 아닌 다른 사무소 B 에 가서 서비스를 사용하려고 할 때 문제가 발생한다. 그래서 공인중개사와 공인중개소를 독립된 엔티티로 모델링한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;고객과 고객의 정체성을 분리하고 정체성을 밸류 오브젝트에서 엔티티로 변경&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/customer.png&quot; alt=&quot;customer&quot; /&gt;&lt;br /&gt;
이 서비스에는 공인주개사무소를 방문했던 고객 정보를 입력해서 보는 기능이 있다. 당시 개발 할때는 고객 A가 원룸, 월세 매물을 문의하는 임차인일 경우만 상정했기 때문에 고객이라는 엔티티에 고객의 정체성은 밸류 오브젝트가 됐다. 그러나 현실 세계에서 고객은 계속 임차인이거나 임대인으로만 정체성을 유지하지 않는다. 고객B 는 A 공인중개사무소를 방문할때마다 계속 정체성이 계속 바뀐다. 몇 개월 전에는 빌라 매물을 구매할 의향이 있는 매수인이였지만, 지금은 빌라 매물을 전세로 시장에 내놓으려는 임대인이면서 동시에 다른 지역의 아파트 전세 매물을 알아보는 임차인이다. 미래에는 빌라 매물을 매도하고 아파트를 구매하려는 매도인 겸 매수인이 될지도 모른다. 고객의 정체성을 정리하면, 고객A는 시간의 흐름에 따라 매수인, 임대인, 임차인, 매도인, 매수인으로 변한다. 과거의 구조에서는 고객 A는 한개의 정체성만 갖고 있을 수 있어서 매수인A, 임대인 A, 임차인 A, 매도인 A, 매수인 A를 별개의 고객으로 간주했다. 이런 구조는 공인중개사의 업무에도 도움이 안된다. 고객 A의 과거 방문의도 및 내역을 알 수 없기 때문이다.&lt;/p&gt;

&lt;p&gt;그래서 이번에는 고객과 고객 정체성 모델을 분리했고 둘다 엔티티로 본다. 이제부터 고객 A는 메수인, 임대인, 임차인 등등 다양한 정체성을 가질 수 있다.&lt;/p&gt;

&lt;p&gt;후기&lt;/p&gt;

&lt;p&gt;에릭 에반스 책 DDD 에서는 DDD를 하기 위해서 도메인 전문가가 팀에 있어야 한다고 말한다. 이 서비스를 개발하면서 팀원중에는 꼭 도메인 전문가가 있어야 한다는 생각이 들었다. 해당 분야에 대한 기본 지식이 있었다면 모델링을 할때 실수를 줄일 수 있을거라고 생각했다. 코드를 다시 읽어봤을때 대부분의 문제는 서비스 특성상 엔티티로 봐야 하는 개념들을 밸류오브젝트로 모델링 했거나, 그 반대로 모델링 하는 등의 문제였기 때문이다.&lt;/p&gt;

&lt;p&gt;그리고 대부분의 DDD 나 설계 관련 책이 자바로 되어있어서 그런지 파이선 커뮤니티에서는 아키텍쳐에 대한 논의가 별로 없어보인다. 경험이 많진 않지만 이런 저런 서비스를 개발 및 운영해본 결과, 초반에는 그냥 개발해도 되지만 서비스가 발전하면 복잡도를 감당하기 위해서 설계가 필요하다. 장고, 플라스크 두 프레임워크에서 컨테이너나 의존성 관계 관리 등의 기능을 제공하지 않아 DDD를 하기가 불편한데 나중에는 이런 기능을 지원하지 않을까 생각한다.&lt;/p&gt;

</description>
        <pubDate>Fri, 10 Jul 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/ddd/2020/07/10/python-proptech-ddd/</link>
        <guid isPermaLink="true">http://localhost:4000/ddd/2020/07/10/python-proptech-ddd/</guid>
      </item>
    
      <item>
        <title>django 서버에서 동시접속자 증가시 502 발생 문제</title>
        <description>&lt;p&gt;1.문제&lt;br /&gt;
2.uWSGI worker 갯수 증가&lt;br /&gt;
3.db connection pool 도입&lt;br /&gt;
4.mysqlclient에서 pymyql 로 변경&lt;br /&gt;
5.uWSGI 에서 gunicorn 으로 변경&lt;/p&gt;

&lt;h5 id=&quot;1-문제&quot;&gt;1. 문제&lt;/h5&gt;

&lt;p&gt;현재 문제가 있는 서버는 평균적으로 분당 1.9만의 리퀘스트를 소화하는데, 동시접속수가 증가하면 ELB 에서 502가 자주 발생한다. 대략 5분당 평균 13개의 502가 발생한다.&lt;/p&gt;

&lt;p&gt;Sever&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Python==2.7&lt;/li&gt;
  &lt;li&gt;Django==1.11&lt;/li&gt;
  &lt;li&gt;uWSGI==2.0&lt;/li&gt;
  &lt;li&gt;mysqlclient&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이 문제를 해결하려고 여러가지 시도를 해봤다.&lt;/p&gt;

&lt;h5 id=&quot;2-uwsgi-worker-갯수-증가&quot;&gt;2. uWSGI worker 갯수 증가&lt;/h5&gt;

&lt;p&gt;기존 worker 갯수는 2개였다. 이전부터 이 worker 들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;max-requests&lt;/code&gt; 옵션에 지정된 리퀘스트를 소화한뒤 정상적으로 종료되는게 아니라, 갑자기 어디선가 발생한 &lt;code class=&quot;highlighter-rouge&quot;&gt;signal 9&lt;/code&gt;을 받고 죽는 문제가 있었다. &lt;code class=&quot;highlighter-rouge&quot;&gt;signal 9&lt;/code&gt; 이 발생하는 이유는 보통 메모리 부족인데, 파게이트 컨테이너 측정치를 봤을때는 메모리 사용량이 대체로 30%여서 메모리 문제는 아닌 것 같았다. 내 추측에는 아마 worker 가 2개 뿐이니 &lt;code class=&quot;highlighter-rouge&quot;&gt;max-request&lt;/code&gt;에 지정된 리퀘스트 수 보다 더 많은 리퀘스트를 받아서 uWSGI에서 signal 9  을 발생시켜 worker 를 강제로 죽이고, worker 가 둘 다 죽어서 워커가 다시 respawn 될때까지 기다리는 상황이 빈번하게 발생하고, 이렇게 spawn된 worker가 없을때 들어온 리퀘스트가 502가 발생한다고 생각했다. 이러한 상황을 방지하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;max-requests-delta&lt;/code&gt; 옵션이 있지만 효과가 없는 것 같았다. (나중에 알게 되었는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;max-requests-delta&lt;/code&gt; 옵션은 &lt;code class=&quot;highlighter-rouge&quot;&gt;uWSGI &amp;gt;= 2.1&lt;/code&gt; 부터 효과가 있다고 한다.) 그래서 스테이징에 worker 수를 증가시켜 테스트를 했는데 2, 4, 6개였을때는 별 차이가 없었지만 8, 12, 16 등등 수를 크게 증가시킬수록 500대 에러 발생률이 크게 낮아졌다. &lt;code class=&quot;highlighter-rouge&quot;&gt;signal 9&lt;/code&gt; 문제도 더이상 발생하지 않았다.&lt;/p&gt;

&lt;p&gt;그런데 worker 수를 증가시키지 말자는 의견이 있어서 이 방법은 가장 마지막에 시도할 해결방법으로 제쳐두었다. 반대 이유는 보통 이상적인 worker 갯수 산정을 &lt;code class=&quot;highlighter-rouge&quot;&gt;core x 2&lt;/code&gt; 로 계산하기 때문에, worker 수가 너무 낮게 잡혀있는건 맞지만, 워커 갯수를 12, 15 정도로 증가시킬거라면 그냥 파게이트 컨테이너를 1대 더 띄우는게 낫다는 이유였다.&lt;/p&gt;

&lt;h5 id=&quot;3-db-connection-pool-도입&quot;&gt;3. db connection pool 도입&lt;/h5&gt;

&lt;p&gt;uWSGI 에서 몽키 패치를 해도 디비 커넥션이 병목현상이 디비 커넥션에서 일어난다고 생각했다. 그래서 &lt;code class=&quot;highlighter-rouge&quot;&gt;sqlalchemy&lt;/code&gt; 디비 커넥션 풀링을 도입해서 스테이징에서 테스트 했다.
&lt;img src=&quot;/images/posts/db_connection_with_pooling.png&quot; alt=&quot;db connection with pooling&quot; /&gt;&lt;br /&gt;
커넥션 풀링 도입 전과 후과 다르다. 그러나 동시접속자 수가 증가하면 여전히 502가 발생했다.&lt;/p&gt;

&lt;h5 id=&quot;4-mysqlclient-에서-pymysql-로-변경&quot;&gt;4. mysqlclient 에서 pymysql 로 변경&lt;/h5&gt;

&lt;p&gt;uWSGI 에서는 gevent 쓰려면 몽키패치를 해야한다. 몽키패치는 pure python 에서만 효과를 발휘하는데, 현재 사용하고 있는 mysqlicent 는 cpython 이라서 몽키패치가 안된다. 결국 gevent 를 100개 spawn하더라도, mysqliclient가 몽키패치 되지않아 gevent 1개가 끝날때까지 나머지가 블로킹 될거고 이 부분이 병목이 된다는 생각이 들었다. pymysql은 pure python 이지만 mysqlclient 에 비교하면 성능이 60%나 떨어진다고 한다. 그러나 성능이 떨어지더라도 몽키패치가 되면 성능이 상쇄될거라고 생각해서 pymyql 로 변경했다.&lt;/p&gt;

&lt;h5 id=&quot;5-uwsgi-에서-gunicorn-으로-변경&quot;&gt;5. uWSGI 에서 gunicorn 으로 변경&lt;/h5&gt;

&lt;p&gt;pymysql 로 라이브러리를 변경 한 뒤에 uWSGI 의 몽키패치가 효과가 있었지만, 동시접속사 수 문제에서는 여전히 큰 효과가 없었다. 그리고 uWSGI 를 잘쓰려면 학습해야하는데 우선 피쳐 개발이 급해서 학습할 시간이 없고, 대략 gunicorn 성능이 더 좋다고 해서 gunicorn 옮기기로 결정했다. 아래는 gunicorn 으로 변경 후 500대 에러의 변화다.
&lt;img src=&quot;/images/posts/gunicorn_deploy.png&quot; alt=&quot;gunicorn deploy&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;references&quot;&gt;References&lt;/h5&gt;

&lt;p&gt;*&lt;a href=&quot;https://stackoverflow.com/questions/48977889/avoid-that-all-workers-get-re-spawned-at-the-same-time&quot;&gt;avoid all workers get respawned&lt;/a&gt;
*&lt;a href=&quot;https://wiki.openstack.org/wiki/PyMySQL_evaluation&quot;&gt;pymysql evalution&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2020/05/19/django-concurrent-user-and-502-error/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2020/05/19/django-concurrent-user-and-502-error/</guid>
      </item>
    
      <item>
        <title>개발 조직의 문화와 제품의 개발 속도</title>
        <description>&lt;p&gt;나는 개발자로서 첫 커리어를 작은 스타트업에서 시작했다. 지금은 이직해서 다른 회사를 다니고 있고 시간도 많이 흘렀지만 아직도 기억에 남는 에피소드가 몇개 있다. 그 중 한가지는 서비스 장애에 대처하는 개발 문화와 관련된 이야기다.&lt;/p&gt;

&lt;p&gt;문제의 그날, 오후에 갑자기 서버가 에러를 내뿜으면서 죽었고 앱에 접속할 수 없는 심각한 장애가 터졌다. 약 20분 뒤에 갑자기 서비스가 복구됐고, CTO가 모든 개발자들을 회의실에 소집했다. 그리고 누가 먼저 서비스가 안된다는 사실을 알았냐고 질문했다. 그런데 다들 서로 얼굴만 쳐다보고 말하기를 주저했다.&lt;/p&gt;

&lt;p&gt;CTO 가 이렇게 말했다. ‘우리가 장애를 어떻게 복구했는지 알아보기 위해서 모였습니다.’ 그러자 다들 한마디씩 말하기 시작했다. CTO는 누가 무엇을 발견해서 누구에게 전달했는지 화이트 보드에 적었다. 장애발생시 부터 복구때까지 무슨일이 있었는지, 한 눈에 볼 수 있도록 정리가 됐다. 안드로이드 개발자가 제일 먼저 앱이 문제가 있다는 사실을 알았고, 서버 개발자 a 에게 확인을 요청했다. 개발자 a는 에러 로그를 보고 db 에 문제가 있다는 사실을 알았지만 혼자 해결할 수 없어서 다른 서버 개발자 b에게 해당 내용을 공유하면서 같이 해결하자고 했다. 동시에 다른 팀에 있었던 서버 개발자 c, d 는 서비스에 문제가 있다는 사실을 알아차렸고 문제의 원인도 파악했다. 그래서 바로 CTO에게 전달헀고 CTO가 장애 대응을 했다.&lt;/p&gt;

&lt;p&gt;CTO는 다음에 만약 비슷한 상황이 벌어진다면 더 빨리 복구하기 위해서 어떤 부분을 개선할 수 있겠냐고 물어봤다. 개발자들은 화이트 보드에 적힌 타임라인에서 군더더기처럼 보이는 부분을 제거했다. 그러자 타임라인이 짧아졌고, 다음번 장애 상황에서는 누가 무엇을 해야 하는지가 명확해졌다. 이제 장애를 일으킨 사람은 더이상 그 회의의 관심사가 아니였다. 그 후에도 장애는 발생했다. 다행히 앱에 접속을 할 수 없을 정도의 치명적인 장애는 아니였다. 대응도 빨랐다.&lt;/p&gt;

&lt;p&gt;이 조직은 이러한 과정을 거쳐서 장애를 더 빨리 극복하게 됐다. 이런 장애는 다른 회사도 경험할텐데, 다들 어떻게 풀어나가고 있을까? 그 이후 나는 몇개의 회사를 거치면서 궁금증을 해소했다. 많은 조직들이 다양한 방식으로 장애에 대응한다. 그 중 다른 의미로 인상깊었던 조직은 이렇게 문제를 해결 했다. 에러가 난 기능을 개발한 개발자를 색출해서 회의실에 몰아놓고 월급을 깎겠다고 했다. 해당 개발자의 이름을 전사원이 들어가있는 채팅방에서 장애의 원인으로 언급했다. 해당 조직은 내가 경험한 조직중에 제품 개발, 개선이 가장 느렸고 개발자 이탈률이 높은 조직이였다.&lt;/p&gt;

&lt;p&gt;장애는 유저 이탈률에 큰 영향을 미친다. 비개발자로 구성된 경영진은 장애를 낸 개발자를 문제의 원인으로 본다. 그래서 해당 개발자에게 책임을 묻는다. 그러나 이러한 해결책은 위에 언급한 사례처럼, 무중단 서비스를 만드는 게 아니고 오히려 조직을 보수화해 기능 개발과 개선만 느려진다. 생각해보면 장애를 절대 일으키지 않는 방법은 개발을 안하는 것이기 때문이다. 개발자들 대부분은 기능 개발 및 배포를 두려워 하게 되고, 결국 기능 개발이 느린 조직이 된다. 대부분의 회사에서 개발 조직의 문화는 사업과 무관한 부분처럼 여기지만 사실은 아니다.&lt;/p&gt;

&lt;h6 id=&quot;references&quot;&gt;References&lt;/h6&gt;
&lt;p&gt;https://developers.google.com/web/fundamentals/performance/why-performance-matters&lt;/p&gt;
</description>
        <pubDate>Wed, 01 Apr 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2020/04/01/dev-culture-and-speed/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2020/04/01/dev-culture-and-speed/</guid>
      </item>
    
      <item>
        <title>장고, EC2 Fargate 사용시 ALLOWED HOST 문제 + 조언은 어떻게 하는게 가장 효율적일까?</title>
        <description>&lt;p&gt;목차&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;문제&lt;/li&gt;
  &lt;li&gt;원인 추측&lt;/li&gt;
  &lt;li&gt;해결&lt;/li&gt;
  &lt;li&gt;개선&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;1-문제&quot;&gt;1. 문제&lt;/h5&gt;

&lt;p&gt;과거 스테이징 서버는 EC2 Instance 를 사용하고, OpsWorks 로 배포한다. 이걸 Fargate 로 바꾸자는 요구가 있어서 서버를 새로 구성하게 됐다. 도커파일을 작성해 ECR에 이미지를 올리고, Fargate에 배포하는건 빠르게 끝냈다. 새로 구성한 ELB 주소도 ALLOWED HOST 에 추가했다. 그런데 리퀘스트를 보내면 ALLOWED HOST 에서 막히는 문제가 발생헀다.&lt;/p&gt;

&lt;h5 id=&quot;2-원인추측&quot;&gt;2. 원인추측&lt;/h5&gt;

&lt;p&gt;프로젝트는 nginx, uwsgi, django 로 구성되어 있다. 그런데 도커 파일에는 uwsgi 만 사용한다. 그래서 리퀘스트를 바로 uwsgi 가 받아서 컨테이너 내부 도커에 전달할때, 해당 리퀘스트가 어디에서 왔는지 (ELB) 정보가 없어서 막히는것이라고 생각헀다. 이때까지만 해도 리퀘스트 출발 정보를 보존해서 uwsgi 에 전달하는게 nginx 에만 있는 기능이라고 생각헀다.&lt;/p&gt;

&lt;p&gt;-&amp;gt; nginx 를 추가했지만 동일한 문제가 발생헀다.&lt;/p&gt;

&lt;p&gt;nginx 를 추가했지만 동일문제가 계속 발생했다. 그래서 두번째로 한건 nginx - uwsgi 가 서로 소켓 통신하도록 바꿔준것이다.&lt;/p&gt;

&lt;p&gt;-&amp;gt; 물론 문제와 전혀 상관없는 부분이였기 때문에 동일 문제는 계속 발생했다. 그 전에는 http 통신을 하도록 되어있었으니 만약 계속 소켓 통신하도록 했다면 속도는 아주 조금 빨라졌지 않았을까? 다시 생각해보니 별로 티도 안났을것 같다. 결국 다른 사람이 http 통신하게 바꾸라고 해서 바꿨다.&lt;/p&gt;

&lt;p&gt;파게이트의 ip를 주소를 직접 넣어줘야 겠다는 생각을 했다. 그런데 파게이트 컨테이너는 aws vpc 네트워크 모드에서 돌아가고 있고, 컨테이너가 새로 뜰 때 마다 ip 주소가 바뀐다. 그렇다면 django ALLOWED HOST에서 가능한 대역폭을 전부 넣어줘야한다. 그런데 장고에 대역폭을 허용하는 기능이 있는지 모르겠다. 그래서 stack overflow를 뒤졌다. 알게된건 사람들이 가능한 ip 주소를 전부 생성해서 ALLOWED HOST 리스트에 추가하는 방법으로 해결하고 있다는 사실을 알게됐다. 이 방법을 선택할 수 도 있지만 사실 필요한 ip 주소는 한개인데, 모든 ip 주소를 생성해서 넣어주는 부분이 내키지 않았다.&lt;/p&gt;

&lt;h5 id=&quot;3해결&quot;&gt;3.해결&lt;/h5&gt;

&lt;p&gt;stack overflow에서 발견한 해결책은 이렇다. ECS 컨테이너는 환경변수에 해당 컨테이너의 IPv4 address를 추가하기 때문에 그걸 갖고와서 ALLOWED HOST에 추가해주면 된다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;requests&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;EC2_PRIVATE_IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;METADATA_URI&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ECS_CONTAINER_METADATA_URI'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'http://169.254.170.2/v2/metadata'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;METADATA_URI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# print(data)
&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;container_meta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Containers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;EC2_PRIVATE_IP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;container_meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Networks'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'IPv4Addresses'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# silently fail as we may not be in an ECS environment
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;EC2_PRIVATE_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Be sure your ALLOWED_HOSTS is a list NOT a tuple
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# or .append() will fail
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ALLOWED_HOSTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EC2_PRIVATE_IP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;왜 컨테이너를 사용할떄는 ALLOWED HOST에 IP 주소를 추가해야 할까? ECS 에이전트는 작업정의의 컨테이너에서 각 작업을 위한 ‘정지’ 상태의 컨테이너를 만든다. 그러고 난 후 ‘정지’ 컨테이너를 위해서 네트워크 네임스페이스를 세팅하고, 작업 내 다른 컨테이너도 시작해 정지된 컨테이너와 같은 네트워크를 공유하게 만든다. 그래서 컨테이너에 IPv4 주소를 추가만 해주면 문제가 해결되는 것이다.&lt;/p&gt;

&lt;h5 id=&quot;4-개선&quot;&gt;4. 개선&lt;/h5&gt;

&lt;p&gt;내가 문제를 발견했을 때 먼저 stack overflow 를 뒤졌다면, 문제를 빠르게 해결했을 것이다. 나는 검색을 하기 전에 먼저 조언을 구했는데, 내가 받은 조언은 ‘..해당 문제의 원인은  당신의 http 네트워크에 대한 이해가 부족해서 발생하는 문제..’ 였다. 이 말을 들은 순간부터 웹에 검색을 해 볼 생각을 못했고, 급한 마음에 책이나 뒤지면서 시간을 다 흘려보냈다. 이렇게 해서 꽤 많은 시간을 이 문제 해결에 버렸다.&lt;/p&gt;

&lt;p&gt;서버 개발자는 네트워크 지식은 기본적으로 갖고 있어야 하고, 계속 공부하는 게 맞다. 하지만 문제 상황에서 해결을 위한 조언으로는 적절하지 못했다. 왜냐면 해당 문제를 해결하는데만 많은 시간을 써버렸고 그만큼 피쳐 개발에 시간을 덜 쓸 수 밖에 없었기 때문이다. 만약 다른 팀원이 같은 문제를 맞닥트렸다면, 어떤 방법이 가장 좋은 방법인가? 내가 생각하는 가장 좋은 방법은 우선 먼저 문제해결을 하고, 그 후에 회고나 복기를 통해서 문제 해결 방법을 짚어보면서 네트워크 지식을 쌓자고 얘기하는 방법이다. 이렇게 하면 문제 해결을 빠르게 할 수 있으니 버리는 시간 없이 바로 다른 것들을 개발할 수 있고(회사 입장에서는 좋다), 또한 문제 해결방법을 복기함으로서 자연스럽게 본인의 부족한 부분도 알 수 있기 때문이다.&lt;/p&gt;

&lt;h5 id=&quot;references&quot;&gt;References&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;https://stackoverflow.com/questions/49828259/when-deploying-django-into-aws-fargate-how-do-you-add-the-local-ip-into-allowed&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 08 Mar 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2020/03/08/django-fargate-allowed-host/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2020/03/08/django-fargate-allowed-host/</guid>
      </item>
    
      <item>
        <title>컨테이너에 ssh 하는건 나쁜가?</title>
        <description>&lt;p&gt;나는 최근에 도커, ECS 파게이트를 사용해서 이미지를 빌드하고 컨테이너를 띄우는 작업을 했다. 그 당시에는 알 수 없는 이유로 컨테이너가 계속 뜨지 않았고, &lt;code class=&quot;highlighter-rouge&quot;&gt;cloud watch&lt;/code&gt; 로그에는 에러 로그가 찍히지 않았다. 그래서 EC2 instance를 사용할 때 처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 접속을 하고 싶었고, 접속을 하려고 stack overflow 와 AWS 공식문서를 읽다가 상당히 많은 개발자들이 &lt;code class=&quot;highlighter-rouge&quot;&gt;컨테이너에 ssh 접속을 한다는 건 정말 이상한 일&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;production 서버에 ssh 하고싶은 상황이 발생하다는 것 자체가 문제&lt;/code&gt;라고 한 코멘트를 읽었다. 컨테이너에 ssh 접속을 하는게 왜 나쁜지에 대해 설명한 글을 아래 부분 번역했다.&lt;/p&gt;

&lt;h5 id=&quot;도커-컨테이너에서-ssh-서버를-돌린다면-잘못하고-있는것이다&quot;&gt;도커 컨테이너에서 SSH 서버를 돌린다면, 잘못하고 있는것이다.&lt;/h5&gt;

&lt;p&gt;사람들이 도커를 처음 사용할때 자주 하는 질문이 있다. ‘컨테이너 안에 어떻게 들어가나요?’ 그리고 다른 사람들의 대답은 이렇다. ‘컨테이너에서 ssh 돌려요.’ 이건 나쁜 방법이다. 이제 이 글에서는 컨테이너에서 ssh 돌리기가 왜 잘못됐는지 이유를 알아보고, ssh 대신 뭘 해야하는지에 대해 알아본다.&lt;/p&gt;

&lt;p&gt;ssh 서버를 돌리는건 너무 좋아보인다. 컨테이너 안에 쉽게 들어갈 수 있게 해주기 때문이다. 대부분의 개발자들이 ssh를 매일 사용하고, 퍼블릭과 프라이빗 키, 패스워드리스 로그인, 키 에이전트, 포트 포워딩등에 친숙하다.&lt;/p&gt;

&lt;p&gt;레디스 서버나 자바 웹서비스용 도커 이미지를 만드는 중이라고 가정하자. 다음은 몇가지 생각해볼만한 질문들이다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SSH를 무엇 때문에 사용하려 하는가?&lt;/p&gt;

    &lt;p&gt;보통 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 를 하려 하는 이유는, 백업, 로그 확인, 프로세스 재시작, 환경설정 바꾸기, gdb 또는 strace 와 같은 툴로 서버 디버깅 등이다. ssh 없이도 이런 활동을 할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;키와 패스워드 관리는 어떻게 할 것인가?&lt;/p&gt;

    &lt;p&gt;대부분의 개발자들이 키와 패스워드를 이미지에 추가해서 굽거나, 볼륨에 넣는다. 키나 패스워드를 업데이트 해야 하는 상황에서는 어떻게 할건가? 이미지 안에 이들을 같이 넣고 구워버리면, 업데이트가 필요한 상황에서는 이미지를 재빌드하고, 재배포하고, 컨테이너를 재시작하는 일련의 과정을 거쳐야 한다.&lt;/p&gt;

    &lt;p&gt;더 나은 방법은 키, 패스워드를 볼륨에 넣고 볼륨을 관리하는 것이다. 꽤 괜찮은 방법이지만 현격한 단점 몇가지가 있다. 해당 방법을 사용할 경우 컨테이너가 절대 볼륨에 write를 하지 않도록 해야 한다. 관리를 잘 못하면, 키와 패스워드가 오염되서 사용불가 상태가 될 수 있다. 만약 여러대의 컨테이너가 해당 키, 패스워드를 동시에 공유하는 상태라면 사태는 더 심각해진다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;보안 업그레이드 관리는 어떻게 할 것인가?&lt;/p&gt;

    &lt;p&gt;ssh 서버는 꽤 안전하다. 그러나, 여전히 몇가지 보안 이슈가 있다. 그래서 ssh 를 사용해서 컨테이너를 업그레이드 해야 할 필요성을 느끼게 될 것이다. 업그레이드를 하려면 이미지를 다시 재빌드 하고, 모든 컨테이너를 재시작 해야한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;그냥 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 서버를 붙여야 한다면?&lt;/p&gt;

    &lt;p&gt;안됀다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 서버만 붙이는게 아니라, Monit 이나 Supervisor같은 프로세스 매니저도 추가해야 한다. 도커는 1개의 프로세스만 관리하기 때문이다. 프로세스가 여러개 필요하다면, 더 상위레벨에서 프로세스들을 관리하는 무언가를 추가해야 하고, 그말은 즉슨 아주 가볍고 간단한 컨테이너를 그냥 복잡한 무언가로 바꾸는 것과 같다. 어플리케이션이 중지한다면, 도커에서 정보를 얻는게 아니고 프로세스 매니저에서 정보를 찾아야 하게 된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;앱을 컨테이너 안에 넣는 일을 하면서 동시에 정책과 보안 담당이라면?&lt;/p&gt;

    &lt;p&gt;작은 기업에서는 이게 큰 문제가 되지 않는다. 하지만 큰 기업에서, 앱을 컨테이너에 넣는 역할을 담당하고 있다면 아마 원격 접근 정책을 관리는 다른 사람이 하고 있을 것이다. 큰 기업은 누가 접근을 할 수 있고, 어떤 종류의 관리 감독이 필요한지에 대한 빡빡한 정책을 갖고 있을 가능성이 높다. 이런 경우라면, 컨테이너에 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 하고 싶은 생각이 없을 것이다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그런데 &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 를 안하고 어떻게 백업, 로그 확인, 서비스 재시작 등등을 할 수 있을까?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;백업&lt;/p&gt;

    &lt;p&gt;데이터는 볼륨에 있어야 한다. 다른 컨테이너를 실행할때, &lt;code class=&quot;highlighter-rouge&quot;&gt;-- volumes-from&lt;/code&gt; 옵션을 주면 첫번째 컨테이너와 볼륨을 공유한다. 새 컨테이너는 백업을 수행하고, 필요한 데이터에 대한 접근도 할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;로그 확인&lt;/p&gt;

    &lt;p&gt;볼륨을 사용하자. 만약 특정 디렉토리 안에 로그를 남기길 원한다면, 그리고 디렉토리가 볼륨이라면 로그 검사용 컨테이너를 돌릴 수 있다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;--volumes-from&lt;/code&gt;)그리고 로그를 확인할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 재시작&lt;/p&gt;

    &lt;p&gt;모든 서비스는 시그널로 재시작하는게 좋다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/ini.d/foo restart&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;service foo restart&lt;/code&gt; 를 한다면, 프로세스에 특정 시그널을 보내게 된다. &lt;code class=&quot;highlighter-rouge&quot;&gt;docker kill -s &amp;lt;signal&amp;gt;&lt;/code&gt; 시그널을 보낼 수 있다.&lt;/p&gt;

    &lt;p&gt;어떤 서비스들은 시그널을 받지 않지만, 소켓으로 커맨드를 받는다. 만약 TCP 소켓이라면, 네트워크에 연결하면 된다. 만약 UNIX소켓이라면, 볼륨을 사용하면 된다. 컨테이너와 서비스를 세팅하고 특정 디렉토리안에 있는 소켓을 컨트롤하면, 그 디렉토리가 볼륨이다. 그러면 볼륨, 소켓을 사용할 수 있는 새 컨테이너를 실행할 수 있다.&lt;/p&gt;

    &lt;p&gt;이 과정은 복잡하지 않다. 서비스가 &lt;code class=&quot;highlighter-rouge&quot;&gt;foo&lt;/code&gt;  라는 소켓을 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/run/foo.sock&lt;/code&gt; 이라는 소켓을 생성했고, 서비스를 깨끗하게 재시작하기 위해서 &lt;code class=&quot;highlighter-rouge&quot;&gt;fooctl restart&lt;/code&gt;  라는 명령어를 실행해야 한다고 하자. 재시작을 하고 싶을 때는, 정확히 똑같은 이미지를 실행하지만, &lt;code class=&quot;highlighter-rouge&quot;&gt;--volumes-from&lt;/code&gt; 옵션을 함께 사용해서 명령어를 오버라이드 한다. 예를 들면 다음과 같다.&lt;/p&gt;

    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Starting the service&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; /var/run fooservice&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Restarting the service with a sidekick container&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--volumes-from&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CID&lt;/span&gt; fooservice fooctl restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;환경설정 수정&lt;/p&gt;

    &lt;p&gt;환경설정을 바꿔야 한다면 이미지 안에서 해야한다. 왜냐면 새 컨테이널르 시작하면 옛날 설정들이 안에 또 있을 거고, 변경사항을 모두 잃어버리게 되니까 말이다.&lt;/p&gt;

    &lt;p&gt;만약 새 버추얼 호스트를 추가하는 등의 변경을 해야 한다면, 볼륨을 사용하면 된다. 이런 환경설정들은 볼륨 안에 있어야 하고, 볼륨은 특수 목적인 ‘설정 변경’ 용 컨테이너와 공유되어야 한다. 이 컨테이너 안에서는 뭐든지 사용할 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt; 와 제일 좋아하는 에디터, 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;API&lt;/code&gt; 콜을 받는 웹 서비스, 또는 외부 소스로 부터 정보를 갖고오는 크론탭 등등.&lt;/p&gt;

    &lt;p&gt;걱정하는 사항은 서비스를 돌리는 컨테이너, 환경설정 업데이트용 컨테이너 두개로 분리해야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서비스 디버깅&lt;/p&gt;

    &lt;p&gt;이런 상황이 정말로 컨테이너에 접속하고 싶은 상황이다. 왜냐면 &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;, 등등을 실행해야 하니까 말이다. 이럴때는, &lt;code class=&quot;highlighter-rouge&quot;&gt;nsenter&lt;/code&gt;를 사용하면 된다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;결론&quot;&gt;결론&lt;/h3&gt;

&lt;p&gt;컨테이너에 ssh 접속하는건 그렇게 까지 나쁘지 않다. 도커 호스트에 접속하지 않아도 되어서 편하다.&lt;/p&gt;

&lt;p&gt;하지만 ssh를 안할 이유도 많은 걸 알았고, 그리고 ssh를 사용하지 않고도 더 깨끗한 구조에서 원하는 모든 기능을 사용할 수 있다.&lt;/p&gt;

&lt;h5 id=&quot;reference&quot;&gt;Reference&lt;/h5&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;https://jpetazzo.github.io/2014/06/23/docker-ssh-considered-evil/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;https://docs.aws.amazon.com/AmazonECS/latest/developerguide/instance-connect.html&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2020/01/10/ssh-into-my-container-is-bad/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2020/01/10/ssh-into-my-container-is-bad/</guid>
      </item>
    
      <item>
        <title>Sentry를 Ubuntu에 self-hosted로 구축하기</title>
        <description>&lt;p&gt;updated: 2020-01-08&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://sentry.io/welcome/&quot;&gt;Sentry&lt;/a&gt;는 소스가 github에 공개되어있어서, 직접 구축해 사용할 수 있다. 여기서는 우선 도커를 사용해 구축하는 방법을 정리했다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;도커 설치&lt;/li&gt;
  &lt;li&gt;도커 컴포즈 설치&lt;/li&gt;
  &lt;li&gt;센트리 도커 프로젝트 받기&lt;/li&gt;
  &lt;li&gt;GeoIp 설정&lt;/li&gt;
  &lt;li&gt;install.sh 로 센트리 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h5 id=&quot;1-도커-설치&quot;&gt;1. 도커 설치&lt;/h5&gt;

&lt;p&gt;AWS EC2 ubuntu instance를 런칭한 후 접속한다.&lt;/p&gt;

&lt;p&gt;먼저 기존의 패키지들을 업데이트 해준다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;apt&lt;/code&gt; 패키지를 HTTPS로 설치할 수 있게 도와주는 패키지들을 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;apt-transport-https ca-certificates curl software-properties-common
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;공식 도커 리포지토리에 GPG Key 를 등록한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://download.docker.com/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-key add -
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;APT 소스에  도커 리포지토리를 추가한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;add-apt-repository &lt;span class=&quot;s2&quot;&gt;&quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도커를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-ce
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도커가 설치됐는지 실행해본다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;● docker.service - Docker Application Container Engine
   Loaded: loaded &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/lib/systemd/system/docker.service&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; enabled&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; vendor preset: enabled&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   Active: active &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;running&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; since Fri 2020-01-03 08:02:17 UTC&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 45min ago
     Docs: https://docs.docker.com
 Main PID: 3360 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;dockerd&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    Tasks: 8
   CGroup: /system.slice/docker.service
           └─3360 /usr/bin/dockerd &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; fd:// &lt;span class=&quot;nt&quot;&gt;--containerd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/run/containerd/containerd.sock

Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2020-01-03T08:02:17.090217516Z&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;warning &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yo
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: time=&quot;&lt;/span&gt;2020-01-03T08:02:17.090478324Z&lt;span class=&quot;s2&quot;&gt;&quot; level=warning msg=&quot;&lt;/span&gt;Yo
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2020-01-03T08:02:17.090621788Z&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;warning &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Yo
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: time=&quot;&lt;/span&gt;2020-01-03T08:02:17.090940760Z&lt;span class=&quot;s2&quot;&gt;&quot; level=info msg=&quot;&lt;/span&gt;Loadi
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2020-01-03T08:02:17.339110960Z&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;info &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Defau
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: time=&quot;&lt;/span&gt;2020-01-03T08:02:17.475207558Z&lt;span class=&quot;s2&quot;&gt;&quot; level=info msg=&quot;&lt;/span&gt;Loadi
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2020-01-03T08:02:17.516353882Z&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;info &lt;span class=&quot;nv&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Docke
Jan 03 08:02:17 ip-192-168-0-55 dockerd[3360]: time=&quot;&lt;/span&gt;2020-01-03T08:02:17.516788243Z&lt;span class=&quot;s2&quot;&gt;&quot; level=info msg=&quot;&lt;/span&gt;Daemo
Jan 03 08:02:17 ip-192-168-0-55 systemd[1]: Started Docker Application Container Engine.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;2-도커-컴포즈-설치&quot;&gt;2. 도커 컴포즈 설치&lt;/h5&gt;

&lt;p&gt;도커 컴포즈를 설치한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt  &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;docker-compose
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;도커 컴포즈가 정상적으로 설치됐는지 확인하기 위해 버전을 확인한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker-compose version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;3-센트리-도커-프로젝트-받기&quot;&gt;3. 센트리 도커 프로젝트 받기&lt;/h5&gt;

&lt;p&gt;센트리 도커 프로젝트를 받아야 한다. 폴더를 생성한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir &lt;/span&gt;sentry
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;해당 폴더 내에서 프로젝트를 클론한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;sentry
git clone https://github.com/getsentry/onpremise &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;4-geoip-설정&quot;&gt;4. GeoIP 설정&lt;/h5&gt;

&lt;p&gt;센트리를 사용하려면 &lt;a href=&quot;https://www.maxmind.com/en/geoip-demo&quot;&gt;GeoIp&lt;/a&gt;가 필요하다. 만약 GeoIp 데이터베이스가 이미 있다면 센트리 설정 파일에서 패스를 잡아주면 된다.  나는 센트리 프로젝트 폴더에 GeoIP 데이터베이스를 넣어주고 거기로 패스를 잡았다. &lt;code class=&quot;highlighter-rouge&quot;&gt;sentry.conf.py&lt;/code&gt;  에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;GEOIP_PATH_MMDB = '../GeoIP.dat'&lt;/code&gt; 를 추가한다.&lt;/p&gt;

&lt;h5 id=&quot;5-installsh-로-센트리-실행&quot;&gt;5. Install.sh 로 센트리 실행&lt;/h5&gt;

&lt;p&gt;센트리를 사용하려면 다음과 같은 서비스가 필요하다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Redis&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;postgresql&quot;&gt;Postgresql&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;zookeeper&quot;&gt;Zookeeper&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getsentry.github.io/symbolicator/&quot;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://clickhouse.yandex&quot;&gt;Clickhouse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getsentry.github.io/symbolicator/&quot;&gt;Symbolicator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;도커 컴포즈로 프로젝트를 실행하면, 해당 서비스들을 external로 연결하기 때문에 먼저 데이터볼륨을 생성하라는 에러 메세지를 준다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR: Volume sentry-symbolicator declared as external, but could not be found. Please create the volume manually using &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;docker volume create &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;sentry-symbolicator&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; and try again.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;external로 연결하는 데이터 볼륨들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;에 명시되어 있는데, 명령어를 쳐서 만드는 것보다 가장 빠른 방법을 선택한다. 센트리 프로젝트 내의 설치 스크립트를 실행시킨다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./install.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;스트립트를 실행하면 자동으로 db 마이그레이션까지 진행한다. 진행 중에 admin 계정 생성을 위해서 아이디와 이메일, 비밀번호를 입력해야 하는 과정이 있다.&lt;/p&gt;

&lt;p&gt;모든 과정이 끝나면 도커 컴포즈 명령어로 실행한다.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ctop&lt;/code&gt; 또는 &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo docker ps&lt;/code&gt;  로 컨테이너가 떠있는지 확인한다. 센트리를 실행하는 데 문제가 없다면, 인터넷 브라우저 창에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1:9000&lt;/code&gt; 을 입력해 센트리로 접속할 수 있다. 아까 생성했던 admin 계정으로 로그인을 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;데이터 볼륨&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;docker-compose.yml 을 보면 데이터 볼륨들이 명시되어있다.&lt;/p&gt;

&lt;p&gt;docker-compose.yml&lt;/p&gt;

&lt;div class=&quot;language-docker highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;volumes:
  sentry-data:
    external: true
  sentry-postgres:
    external: true
  sentry-redis:
    external: true
  sentry-zookeeper:
    external: true
  sentry-kafka:
    external: true
  sentry-clickhouse:
    external: true
  sentry-symbolicator:
    external: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;데이터 볼륨이란?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Docker 데이터 볼륨은 데이터를 컨테이너가 아닌 호스트에 저장하는 방식입니다. 따라서 데이터볼륨은 컨테이너끼리 데이터를 공유할 때 활용할 수 있습니다.&lt;/p&gt;

  &lt;p&gt;Docker 컨테이너 안의 파일 변경 사항은 Union File System에 의해 관리됩니다. 하지만 데이터 볼륨은 Union File System을 통하지 않고 바로 호스트에 저장됩니다. 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker commit&lt;/code&gt; 명령을 통해 이미지로 생성해도 데이터 볼륨의 변경 사항은 이미지에 포함되지 않습니다.&lt;/p&gt;

  &lt;p&gt;http://pyrasis.com/book/DockerForTheReallyImpatient/Chapter06/04&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-18-04&lt;/li&gt;
  &lt;li&gt;https://medium.com/sentry-with-docker/installing-sentry-with-docker-c1d83dfee577&lt;/li&gt;
  &lt;li&gt;https://github.com/getsentry/onpremise&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Sun, 05 Jan 2020 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/devops/2020/01/05/sentry-self-hosted/</link>
        <guid isPermaLink="true">http://localhost:4000/devops/2020/01/05/sentry-self-hosted/</guid>
      </item>
    
      <item>
        <title>애자일과 생산성측정</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.msn.com/ko-kr/money/topstories/%EB%8B%A8%EB%8F%85-%EB%B9%A8%EB%9D%BC%EC%95%BC-%EC%82%B4%EC%95%84%EB%82%A8%EB%8A%94%EB%8B%A4%E2%80%A6%EC%8B%A0%ED%95%9C%EA%B8%88%EC%9C%B5-%EC%95%A0%EC%9E%90%EC%9D%BC%EC%A1%B0%EC%A7%81-%EB%8F%84%EC%9E%85%ED%95%9C%EB%8B%A4/ar-AAzyXzC&quot;&gt;단독 “빨라야 살아남는다”…신한금융, 애자일조직 도입한다&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;http://www.fntimes.com/html/view.php?ud=201902282135037701dd55077bc2_18&quot;&gt;금융 빅5, 조직·인력 탈바꿈…신한 ‘사내벤처’ KB ‘애자일’&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;기사에 따르면 신한은행은 애자일 조직체계에 도입해 직급과 관계없이 일에 적합한 사람을 팀장으로 임명해, 민첩한 의사결정을 통해서 빠른 실행력을 얻을 것이라 기대한다고 전한다. 많은 IT 관련 회사와 조직이 애자일을 도입하는데, 과연 애자일을 실행해서 생산성이 향상됐을까?&lt;/p&gt;

&lt;h3 id=&quot;measuring-productivity-in-agile-software-development-process-a-scoping-study&quot;&gt;Measuring Productivity in Agile Software Development Process: A Scoping Study&lt;/h3&gt;
&lt;p&gt;애자일 소프트웨어 개발 과정에서 생산성 측정하기: 주제범위 스터디&lt;/p&gt;

&lt;p&gt;이 논문은 직접 애자일을 실행하고 생산성을 측정하는 대신, 애자일 방법론대로 소프트웨어를 만들고 생산성을 측정한 12개의 논문을 모아서 각 논문에서 정의한 생산성에 대해 정리했다. 그리고 각 연구에서 생산성을 측정하는데 사용한 방법도 연구했다. 논문에서 몇가지 부분을 번역해봤다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ABSTRACT&lt;br /&gt;
An agile software development process is often claimed to increase productivity. However, productivity measurement in agile software development is little researched. Measures are not explicitly defined nor commonly agreed upon. In this paper, we highlight the agile productivity measures reported in literature by means of a research method called scoping study. We were able to identify 12 papers reporting the productivity measures in agile software development processes. We found that finding, understanding and putting into use agile productivity definitions is not an easy task. From the perspective of common roles in agile software development process and existing knowledge workers’ productivity dimensions, we also emphasize that none of the productivity measures satisfy these fully. We recommend that future effort should be focused on defining agile productivity in measurable, practicable and meaningful form.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;초록
애자일 소프트웨어 개발 방법론은 생산성을 향상시킨다고 알려져있다. 그러나 애자일 소프트웨어 개발 방법론에서 생산성 측정 방법에 대해서는 연구가 거의 이뤄지지 않았다. 측정 방법은 명시적으로 정의되거나, 공통적으로 합의되지 않았다. 본 논문에서는, 범위 연구(scoping study)라는 연구 방법을 사용해 논문에 보고된 애자일 생산성 측정 방법을 알아본다. 애자일 소프트웨어 개발 방법 과정에서 생산성을 측정한 12개의 논문을 연구했고, 애자일 개발 과정에서 생산성의 정의를 찾고 이해하고 활용하는 것이 어려운 일이라는 것을 알았다. 애자일 소프트웨어 개발 방법론에서의 역할과 기존 지식 근로자의 생산성 관점은 생산성 측정 방법을 완전히 만족시킬 수 없었다.
미래에는 측정 가능하고 실행 가능하며 의미있는 형식으로 애자일 생산성을 정의하는 데 중점을 두도록 노력해야 한다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;3.3 Stage 3: Study Selection&lt;br /&gt;
We scanned all downloaded papers to find evidence in literature of measuring productivity in agile software development processes.
This led to a selection of 12 papers in total, out of 124. The inclusion and exclusion criteria employed is defined below.
Inclusion Criteria: The inclusion criteria were applied at three subsequent levels. First, the titles were screened. They were selected if the title contained ‘agile’ and ‘productivity’. Second, we analyzed the abstracts of the papers where it had to demonstrate some experience in agile software development concerning productivity compared to other factors, such as quality, cost and schedule. As a third step, we thoroughly read the papers and included only those studies which described/discusses at least one of the following:
agile software development process
productivity
method to calculate productivity, or productivity metrics
Exclusion Criteria: The studies that did not satisfy any of the inclusion criteria were excluded.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;3.3 3 단계 : 연구 선택&lt;br /&gt;
애자일 소프트웨어 개발 방법에서 생산성을 측정에 대한 부분을 찾기 위해 다운로드 받은 모든 문서를 읽었다.
이렇게 해서 124개 중 총 12개의 논문을 선택했다. 채택 및 제외 기준은 아래에 정의했다.
포함 기준 : 포함 기준은 세 가지로 적용했다. 먼저 제목에 애자일과 생산성이 포함되면 선정했다. 둘째, 품질, 비용 및 일정과 같은 다른 요소와 비교하여 생산성에 관한 애자일 소프트웨어 개발 경험을 보여 주는 논문의 초록을 분석했다. 세 번째, 우리는 논문을 처음부터 끝까지 읽고 다음 중 하나 이상을 설명 / 토론 한 연구만 포함했다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;애자일 소프트웨어 개발 프로세스&lt;/li&gt;
  &lt;li&gt;생산성&lt;/li&gt;
  &lt;li&gt;생산성 계산 방법 또는 생산성 메트릭&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;배제 기준 : 포함 기준을 충족시키지 못한 연구는 제외했다.&lt;/p&gt;

&lt;p&gt;채택된 연구들&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ID&lt;/th&gt;
      &lt;th&gt;정보&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;J1&lt;/td&gt;
      &lt;td&gt;Layman, L.; Williams, L.; Cunningham, L., Motivations and measurements in an agile case study, Journal of Systems Architecture, Volume 52, Issue 11, November 2006, Pages 654-667, ISSN 1383-7621&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J2&lt;/td&gt;
      &lt;td&gt;Tarhan, A.; Yilmaz, S. G., Systematic analyses andcomparison of development performance and productquality of Incremental Process and Agile Process,Information and Software Technology, Volume 56, Issue5, May 2014, Pages 477-494, ISSN 0950-5849,&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J3&lt;/td&gt;
      &lt;td&gt;Moser, R.; Abrahamsson, P., Pedrycz, W., Sillitti, A., and Succi, G., “A Case Study on the Impact of Refactoring on Quality and Productivity in an Agile Team,” inBalancing Agility and Formalism in Software Engineering, vol. 5082, B. Meyer, J. Nawrocki, and B.Walter, Eds. Springer Berlin Heidelberg, 2008, pp. 252–266.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J4&lt;/td&gt;
      &lt;td&gt;Parrish, A.; Smith, R.; Hale, D.; Hale, J., “A field study of developer pairs: productivity impacts and implications,” Software, IEEE , vol.21, no.5, pp.76,79, Sept.-Oct. 2004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J5&lt;/td&gt;
      &lt;td&gt;Athanasiou, D.; Nugroho, A.; Visser, J.; Zaidman, A.,”Test Code Quality and Its Relation to Issue HandlingPerformance,” Software Engineering, IEEE Transactions on , vol.40, no.11, pp.1100,1125, Nov. 1 2014&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;Ramasubbu, N.; Balan, R. K., 2009. The impact of process choice in high maturity environments: An empirical analysis. In Proceedings of the 31st International Conference on Software Engineering (ICSE ‘09). IEEE Computer Society, Washington, DC, USA, 529-539.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;Abrahamsson, P.; Koskela, J., “Extreme programming: a survey of empirical data from a controlled case study,” Empirical Software Engineering, 2004. ISESE ‘04. Proceedings. 2004 International Symposium on , vol., no., pp.73,82, 19-20 Aug. 2004&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;Hu Guang-yong, “Study and practice of import Scrum agile software development,” Communication Software and Networks (ICCSN), 2011 IEEE 3rd International Conference on , vol., no., pp.217,220, 27-29 May 2011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C4&lt;/td&gt;
      &lt;td&gt;Williams, L.; Brown, G.; Meltzer, A.; Nagappan, N., “Scrum + Engineering Practices: Experiences of Three Microsoft Teams,” Empirical Software Engineering and Measurement (ESEM), 2011 International Symposium on , vol., no., pp.463,471, 22-23 Sept. 2011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C5&lt;/td&gt;
      &lt;td&gt;Abrahamsson, P., “Extreme programming: first results from a controlled case study,” Euromicro Conference, 2003. Proceedings. 29th , vol., no., pp.259,266, 1-6 Sept. 2003&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C6&lt;/td&gt;
      &lt;td&gt;de Souza Carvalho, W.C.; Rosa, P.F.; dos Santos Soares, M.; Teixeira da Cunha Junior, M.A.; Buiatte, L.C., “AComparative Analysis of the Agile and Traditional Software Development Processes Productivity,” Computer Science Society (SCCC), 201130th International Conference of the Chilean , vol., no., pp.74,82, 9-11 Nov. 2011&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C7&lt;/td&gt;
      &lt;td&gt;Sutherland, J.; Viktorov, A.; Blount, J.; Puntikov, N., “Distributed Scrum: Agile Project Management with Outsourced Development Teams,” System Sciences, 2007. HICSS 2007. 40th Annual Hawaii International Conference on , vol., no., pp.274a,274a, Jan. 2007&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;생산성 메트릭&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;연구&lt;/th&gt;
      &lt;th&gt;생산성측정&lt;/th&gt;
      &lt;th&gt;지식 근로자 수&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;J1&lt;/td&gt;
      &lt;td&gt;실행가능한 코드 라인 수 / 평균 개발자 1일 평균 업무량&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J1&lt;/td&gt;
      &lt;td&gt;기능 점수 / 평균 개발자 1개월 평균 업무량&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J2&lt;/td&gt;
      &lt;td&gt;코드 라인 수 / 1인이 1시간 작업 단위&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J3&lt;/td&gt;
      &lt;td&gt;기능 점수 / 1인&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J4&lt;/td&gt;
      &lt;td&gt;시간당 완료된 평균 기능 점수&lt;/td&gt;
      &lt;td&gt;개발자 2명으로 구성된 팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;J5&lt;/td&gt;
      &lt;td&gt;해결된 이슈 수 / 개월&lt;/td&gt;
      &lt;td&gt;개발자별&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C1&lt;/td&gt;
      &lt;td&gt;해결된 이슈 수 / 평균 개발자 1일 평균 업무량&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C2&lt;/td&gt;
      &lt;td&gt;코드 라인 수 / 1인 1시간 업무&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C3&lt;/td&gt;
      &lt;td&gt;코드 라인 수&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C4&lt;/td&gt;
      &lt;td&gt;코드 라인 수&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C5&lt;/td&gt;
      &lt;td&gt;코드 라인 수 / 시간&lt;/td&gt;
      &lt;td&gt;개발자 4명으로 구성된&lt;/td&gt;
      &lt;td&gt;팀&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C6&lt;/td&gt;
      &lt;td&gt;기능크기 / 노력&lt;/td&gt;
      &lt;td&gt;팀(스크럼)&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;C7&lt;/td&gt;
      &lt;td&gt;기능점수 / 개월수&lt;/td&gt;
      &lt;td&gt;개발자별&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;RQ1: How is productivity measured in the agile software development process?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;RQ1 : 애자일 소프트웨어 개발 방법에서는 생산성을 어떻게 측정하는가?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;SUMMARY&lt;br /&gt;
In summary, we could state that the present productivity measures are not efficient enough to satisfy the requirements for defining productivity in agile software development. It is clear that defining agile productivity measures must consider the knowledge dimension. In the future, we have a twofold research direction, first we aim at defining measureable productivity metrics for different agile roles that would also satisfy the knowledge worker dimensions and cover all aspects (from requirements to delivery of working product to a customer) of agile development process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;요약하면, 현재 생산성 측정 방법은 애자일 소프트 웨어 개발의 생산성 정의에 필요한 요구 사항을 충족하지 못한다. 애자일 생산성 측정은 지식 측면을 고려해야 한다. 앞으로는 두가지 연구 방향이 있다. 하나는 애자일에서 다양한 직군과 지식 근로자 또한 만족할만한, 측정가능한 생산성 메트릭을 정의하는 것이다. 그리고 애자일 개발 과정 전 부분(요구사항에서 부터 고객에게 작업물 제공을 전달하는 것 까지)을 포괄하는 것이다.&lt;/p&gt;

&lt;p&gt;이 논문으로 알 수 있는 건 다음과 같다. 우선 애자일 생산성에 관한 연구들이 생산성을 측정하는데 코드 라인수, 기능점수를 많이 활용하고 있다. 하지만 사실 애자일 개발 방법론을 접목한다면 리팩토링이 필수적으로 이뤄저야 하는데, 리팩토링을 하게 되면 대체로 코드 라인 수가 짧아진다. 여기서 알 수 있는 것은 코드가 더 길어질수록 생산성이 더 좋아지는 게 아니라는 것이다. 코드 라인 수는 생산성 측정에 사용하기에 부족하다. 또한, 애자일 개발 방법을 도입하면 사람들은 팀을 구성해서 공동의 목표를 위해 일하게 되기 때문에, 개인의 성과 역시 팀 단위에서 측정해야 한다. 스크럼에서는 팀에 개발자 뿐만 아니라 테스터, 스크럼 마스터 등등 다양한 역할이 있다. 이런 직군들은 코드 라인 수로 생산성을 측정할 수 없다. 현재 애자일 생산성 메트릭으로는 같은 팀의 다른 직군 생산성을 측정할 수 없는 것이다.&lt;br /&gt;
생산성은 많은 기업이 고민하는 부분이다. 스타트업은 생산성 극대화 효과를 기대하고 애자일을 도입한다. 대부분의 사람들이 애자일이 워터폴보다 더 나은 방법이라고 생각한다. 하지만 애자일을 도입할 경우 생산성이 얼마나 향상되는지에 대해서는 알 수 없다. 각 팀 또는 회사에서는 생산성을 측정 또는 개인의 퍼포먼스 평가를 위해 다른 방법을 도입하는 게 최선인 것 같다.&lt;/p&gt;

</description>
        <pubDate>Thu, 15 Aug 2019 00:00:00 +0900</pubDate>
        <link>http://localhost:4000/agile/2019/08/15/agile-and-productivity-using-scoping-study/</link>
        <guid isPermaLink="true">http://localhost:4000/agile/2019/08/15/agile-and-productivity-using-scoping-study/</guid>
      </item>
    

    
      
        
      
    
      
    
      
    
      
    
      
    
      
        
          <item>
            <title>Tags</title>
            <description>{% for tag in site.tags %} {% assign t = tag | first %} {% assign posts = tag | last %}

&lt;h4&gt;#{{ t }}&lt;/h4&gt;
&lt;ul style=&quot;list-style-type: none;&quot;&gt;
    {% for post in posts %} {% if post.tags contains t %}
    &lt;li&gt;
        &lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;
        &lt;span class=&quot;post-meta&quot;&gt;{{ post.date | date: &quot;%b %-d, %Y&quot; }}&lt;/span&gt;
    &lt;/li&gt;
    {% endif %} {% endfor %}
&lt;/ul&gt;
{% endfor %}</description>
            <link>http://localhost:4000/tags/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>